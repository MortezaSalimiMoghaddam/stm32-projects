
Project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  08003aec  08003aec  00013aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004090  08004090  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004090  08004090  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004090  08004090  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004090  08004090  00014090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004094  08004094  00014094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000070  08004108  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08004108  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d17  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000186b  00000000  00000000  00029db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002b620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017253  00000000  00000000  0002c918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a507  00000000  00000000  00043b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083cc7  00000000  00000000  0004e072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1d39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b58  00000000  00000000  000d1d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ad4 	.word	0x08003ad4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003ad4 	.word	0x08003ad4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <NRF24_csn>:
	while(uSecVar--);
}

//1. Chip Select function
void NRF24_csn(int state)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b00      	cmp	r3, #0
 8000168:	d008      	beq.n	800017c <NRF24_csn+0x20>
 800016a:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <NRF24_csn+0x38>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	4a0a      	ldr	r2, [pc, #40]	; (8000198 <NRF24_csn+0x3c>)
 8000170:	8811      	ldrh	r1, [r2, #0]
 8000172:	2201      	movs	r2, #1
 8000174:	4618      	mov	r0, r3
 8000176:	f001 fc81 	bl	8001a7c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800017a:	e007      	b.n	800018c <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 800017c:	4b05      	ldr	r3, [pc, #20]	; (8000194 <NRF24_csn+0x38>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	4a05      	ldr	r2, [pc, #20]	; (8000198 <NRF24_csn+0x3c>)
 8000182:	8811      	ldrh	r1, [r2, #0]
 8000184:	2200      	movs	r2, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f001 fc78 	bl	8001a7c <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	3708      	adds	r7, #8
 8000190:	46bd      	mov	sp, r7
 8000192:	bd80      	pop	{r7, pc}
 8000194:	20000090 	.word	0x20000090
 8000198:	20000094 	.word	0x20000094

0800019c <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d008      	beq.n	80001bc <NRF24_ce+0x20>
 80001aa:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <NRF24_ce+0x38>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4a0a      	ldr	r2, [pc, #40]	; (80001d8 <NRF24_ce+0x3c>)
 80001b0:	8811      	ldrh	r1, [r2, #0]
 80001b2:	2201      	movs	r2, #1
 80001b4:	4618      	mov	r0, r3
 80001b6:	f001 fc61 	bl	8001a7c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80001ba:	e007      	b.n	80001cc <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <NRF24_ce+0x38>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a05      	ldr	r2, [pc, #20]	; (80001d8 <NRF24_ce+0x3c>)
 80001c2:	8811      	ldrh	r1, [r2, #0]
 80001c4:	2200      	movs	r2, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f001 fc58 	bl	8001a7c <HAL_GPIO_WritePin>
}
 80001cc:	bf00      	nop
 80001ce:	3708      	adds	r7, #8
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	20000090 	.word	0x20000090
 80001d8:	20000096 	.word	0x20000096

080001dc <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80001e6:	2000      	movs	r0, #0
 80001e8:	f7ff ffb8 	bl	800015c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	f003 031f 	and.w	r3, r3, #31
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80001f6:	f107 010c 	add.w	r1, r7, #12
 80001fa:	2364      	movs	r3, #100	; 0x64
 80001fc:	2201      	movs	r2, #1
 80001fe:	480a      	ldr	r0, [pc, #40]	; (8000228 <NRF24_read_register+0x4c>)
 8000200:	f002 f8e8 	bl	80023d4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000204:	f107 030c 	add.w	r3, r7, #12
 8000208:	1c59      	adds	r1, r3, #1
 800020a:	2364      	movs	r3, #100	; 0x64
 800020c:	2201      	movs	r2, #1
 800020e:	4806      	ldr	r0, [pc, #24]	; (8000228 <NRF24_read_register+0x4c>)
 8000210:	f002 fa23 	bl	800265a <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000214:	7b7b      	ldrb	r3, [r7, #13]
 8000216:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000218:	2001      	movs	r0, #1
 800021a:	f7ff ff9f 	bl	800015c <NRF24_csn>
	return retData;
 800021e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000220:	4618      	mov	r0, r3
 8000222:	3710      	adds	r7, #16
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	20000098 	.word	0x20000098

0800022c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	6039      	str	r1, [r7, #0]
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	4613      	mov	r3, r2
 800023a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800023c:	2000      	movs	r0, #0
 800023e:	f7ff ff8d 	bl	800015c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	f003 031f 	and.w	r3, r3, #31
 8000248:	b2db      	uxtb	r3, r3
 800024a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800024c:	f107 010c 	add.w	r1, r7, #12
 8000250:	2364      	movs	r3, #100	; 0x64
 8000252:	2201      	movs	r2, #1
 8000254:	4808      	ldr	r0, [pc, #32]	; (8000278 <NRF24_read_registerN+0x4c>)
 8000256:	f002 f8bd 	bl	80023d4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800025a:	79bb      	ldrb	r3, [r7, #6]
 800025c:	b29a      	uxth	r2, r3
 800025e:	2364      	movs	r3, #100	; 0x64
 8000260:	6839      	ldr	r1, [r7, #0]
 8000262:	4805      	ldr	r0, [pc, #20]	; (8000278 <NRF24_read_registerN+0x4c>)
 8000264:	f002 f9f9 	bl	800265a <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000268:	2001      	movs	r0, #1
 800026a:	f7ff ff77 	bl	800015c <NRF24_csn>
}
 800026e:	bf00      	nop
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	20000098 	.word	0x20000098

0800027c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	460a      	mov	r2, r1
 8000286:	71fb      	strb	r3, [r7, #7]
 8000288:	4613      	mov	r3, r2
 800028a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800028c:	2000      	movs	r0, #0
 800028e:	f7ff ff65 	bl	800015c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f043 0320 	orr.w	r3, r3, #32
 8000298:	b2db      	uxtb	r3, r3
 800029a:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 800029c:	79bb      	ldrb	r3, [r7, #6]
 800029e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80002a0:	f107 010c 	add.w	r1, r7, #12
 80002a4:	2364      	movs	r3, #100	; 0x64
 80002a6:	2202      	movs	r2, #2
 80002a8:	4804      	ldr	r0, [pc, #16]	; (80002bc <NRF24_write_register+0x40>)
 80002aa:	f002 f893 	bl	80023d4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80002ae:	2001      	movs	r0, #1
 80002b0:	f7ff ff54 	bl	800015c <NRF24_csn>
}
 80002b4:	bf00      	nop
 80002b6:	3710      	adds	r7, #16
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	20000098 	.word	0x20000098

080002c0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	6039      	str	r1, [r7, #0]
 80002ca:	71fb      	strb	r3, [r7, #7]
 80002cc:	4613      	mov	r3, r2
 80002ce:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80002d0:	2000      	movs	r0, #0
 80002d2:	f7ff ff43 	bl	800015c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	f043 0320 	orr.w	r3, r3, #32
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80002e0:	f107 010c 	add.w	r1, r7, #12
 80002e4:	2364      	movs	r3, #100	; 0x64
 80002e6:	2201      	movs	r2, #1
 80002e8:	4808      	ldr	r0, [pc, #32]	; (800030c <NRF24_write_registerN+0x4c>)
 80002ea:	f002 f873 	bl	80023d4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80002ee:	79bb      	ldrb	r3, [r7, #6]
 80002f0:	b29a      	uxth	r2, r3
 80002f2:	2364      	movs	r3, #100	; 0x64
 80002f4:	6839      	ldr	r1, [r7, #0]
 80002f6:	4805      	ldr	r0, [pc, #20]	; (800030c <NRF24_write_registerN+0x4c>)
 80002f8:	f002 f86c 	bl	80023d4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80002fc:	2001      	movs	r0, #1
 80002fe:	f7ff ff2d 	bl	800015c <NRF24_csn>
}
 8000302:	bf00      	nop
 8000304:	3710      	adds	r7, #16
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000098 	.word	0x20000098

08000310 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000314:	21ff      	movs	r1, #255	; 0xff
 8000316:	20e1      	movs	r0, #225	; 0xe1
 8000318:	f7ff ffb0 	bl	800027c <NRF24_write_register>
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}

08000320 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000324:	21ff      	movs	r1, #255	; 0xff
 8000326:	20e2      	movs	r0, #226	; 0xe2
 8000328:	f7ff ffa8 	bl	800027c <NRF24_write_register>
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}

08000330 <NRF24_begin>:
	return statReg;
}

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000330:	b082      	sub	sp, #8
 8000332:	b580      	push	{r7, lr}
 8000334:	b084      	sub	sp, #16
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
 800033a:	61fb      	str	r3, [r7, #28]
 800033c:	460b      	mov	r3, r1
 800033e:	807b      	strh	r3, [r7, #2]
 8000340:	4613      	mov	r3, r2
 8000342:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000344:	4b66      	ldr	r3, [pc, #408]	; (80004e0 <NRF24_begin+0x1b0>)
 8000346:	4618      	mov	r0, r3
 8000348:	f107 031c 	add.w	r3, r7, #28
 800034c:	2258      	movs	r2, #88	; 0x58
 800034e:	4619      	mov	r1, r3
 8000350:	f002 ff3e 	bl	80031d0 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000354:	4a63      	ldr	r2, [pc, #396]	; (80004e4 <NRF24_begin+0x1b4>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800035a:	4a63      	ldr	r2, [pc, #396]	; (80004e8 <NRF24_begin+0x1b8>)
 800035c:	887b      	ldrh	r3, [r7, #2]
 800035e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000360:	4a62      	ldr	r2, [pc, #392]	; (80004ec <NRF24_begin+0x1bc>)
 8000362:	883b      	ldrh	r3, [r7, #0]
 8000364:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000366:	2001      	movs	r0, #1
 8000368:	f7ff fef8 	bl	800015c <NRF24_csn>
	NRF24_ce(0);
 800036c:	2000      	movs	r0, #0
 800036e:	f7ff ff15 	bl	800019c <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000372:	2005      	movs	r0, #5
 8000374:	f001 f8f6 	bl	8001564 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000378:	2108      	movs	r1, #8
 800037a:	2000      	movs	r0, #0
 800037c:	f7ff ff7e 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000380:	213f      	movs	r1, #63	; 0x3f
 8000382:	2001      	movs	r0, #1
 8000384:	f7ff ff7a 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000388:	2103      	movs	r1, #3
 800038a:	2002      	movs	r0, #2
 800038c:	f7ff ff76 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000390:	2103      	movs	r1, #3
 8000392:	2003      	movs	r0, #3
 8000394:	f7ff ff72 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000398:	2103      	movs	r1, #3
 800039a:	2004      	movs	r0, #4
 800039c:	f7ff ff6e 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80003a0:	2102      	movs	r1, #2
 80003a2:	2005      	movs	r0, #5
 80003a4:	f7ff ff6a 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80003a8:	210f      	movs	r1, #15
 80003aa:	2006      	movs	r0, #6
 80003ac:	f7ff ff66 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80003b0:	210e      	movs	r1, #14
 80003b2:	2007      	movs	r0, #7
 80003b4:	f7ff ff62 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80003b8:	2100      	movs	r1, #0
 80003ba:	2008      	movs	r0, #8
 80003bc:	f7ff ff5e 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80003c0:	2100      	movs	r1, #0
 80003c2:	2009      	movs	r0, #9
 80003c4:	f7ff ff5a 	bl	800027c <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80003c8:	23e7      	movs	r3, #231	; 0xe7
 80003ca:	733b      	strb	r3, [r7, #12]
 80003cc:	23e7      	movs	r3, #231	; 0xe7
 80003ce:	72fb      	strb	r3, [r7, #11]
 80003d0:	23e7      	movs	r3, #231	; 0xe7
 80003d2:	72bb      	strb	r3, [r7, #10]
 80003d4:	23e7      	movs	r3, #231	; 0xe7
 80003d6:	727b      	strb	r3, [r7, #9]
 80003d8:	23e7      	movs	r3, #231	; 0xe7
 80003da:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80003dc:	f107 0308 	add.w	r3, r7, #8
 80003e0:	2205      	movs	r2, #5
 80003e2:	4619      	mov	r1, r3
 80003e4:	200a      	movs	r0, #10
 80003e6:	f7ff ff6b 	bl	80002c0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80003ea:	23c2      	movs	r3, #194	; 0xc2
 80003ec:	733b      	strb	r3, [r7, #12]
 80003ee:	23c2      	movs	r3, #194	; 0xc2
 80003f0:	72fb      	strb	r3, [r7, #11]
 80003f2:	23c2      	movs	r3, #194	; 0xc2
 80003f4:	72bb      	strb	r3, [r7, #10]
 80003f6:	23c2      	movs	r3, #194	; 0xc2
 80003f8:	727b      	strb	r3, [r7, #9]
 80003fa:	23c2      	movs	r3, #194	; 0xc2
 80003fc:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80003fe:	f107 0308 	add.w	r3, r7, #8
 8000402:	2205      	movs	r2, #5
 8000404:	4619      	mov	r1, r3
 8000406:	200b      	movs	r0, #11
 8000408:	f7ff ff5a 	bl	80002c0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800040c:	21c3      	movs	r1, #195	; 0xc3
 800040e:	200c      	movs	r0, #12
 8000410:	f7ff ff34 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000414:	21c4      	movs	r1, #196	; 0xc4
 8000416:	200d      	movs	r0, #13
 8000418:	f7ff ff30 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800041c:	21c5      	movs	r1, #197	; 0xc5
 800041e:	200e      	movs	r0, #14
 8000420:	f7ff ff2c 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000424:	21c6      	movs	r1, #198	; 0xc6
 8000426:	200f      	movs	r0, #15
 8000428:	f7ff ff28 	bl	800027c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800042c:	23e7      	movs	r3, #231	; 0xe7
 800042e:	733b      	strb	r3, [r7, #12]
 8000430:	23e7      	movs	r3, #231	; 0xe7
 8000432:	72fb      	strb	r3, [r7, #11]
 8000434:	23e7      	movs	r3, #231	; 0xe7
 8000436:	72bb      	strb	r3, [r7, #10]
 8000438:	23e7      	movs	r3, #231	; 0xe7
 800043a:	727b      	strb	r3, [r7, #9]
 800043c:	23e7      	movs	r3, #231	; 0xe7
 800043e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000440:	f107 0308 	add.w	r3, r7, #8
 8000444:	2205      	movs	r2, #5
 8000446:	4619      	mov	r1, r3
 8000448:	2010      	movs	r0, #16
 800044a:	f7ff ff39 	bl	80002c0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800044e:	2100      	movs	r1, #0
 8000450:	2011      	movs	r0, #17
 8000452:	f7ff ff13 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000456:	2100      	movs	r1, #0
 8000458:	2012      	movs	r0, #18
 800045a:	f7ff ff0f 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800045e:	2100      	movs	r1, #0
 8000460:	2013      	movs	r0, #19
 8000462:	f7ff ff0b 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000466:	2100      	movs	r1, #0
 8000468:	2014      	movs	r0, #20
 800046a:	f7ff ff07 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800046e:	2100      	movs	r1, #0
 8000470:	2015      	movs	r0, #21
 8000472:	f7ff ff03 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000476:	2100      	movs	r1, #0
 8000478:	2016      	movs	r0, #22
 800047a:	f7ff feff 	bl	800027c <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800047e:	f000 f955 	bl	800072c <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000482:	2100      	movs	r1, #0
 8000484:	201c      	movs	r0, #28
 8000486:	f7ff fef9 	bl	800027c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800048a:	2100      	movs	r1, #0
 800048c:	201d      	movs	r0, #29
 800048e:	f7ff fef5 	bl	800027c <NRF24_write_register>
	printRadioSettings();
 8000492:	f000 f965 	bl	8000760 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000496:	210f      	movs	r1, #15
 8000498:	200f      	movs	r0, #15
 800049a:	f000 f829 	bl	80004f0 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800049e:	2003      	movs	r0, #3
 80004a0:	f000 f884 	bl	80005ac <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80004a4:	2001      	movs	r0, #1
 80004a6:	f000 f8bb 	bl	8000620 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80004aa:	2002      	movs	r0, #2
 80004ac:	f000 f8fe 	bl	80006ac <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80004b0:	f000 f864 	bl	800057c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80004b4:	2020      	movs	r0, #32
 80004b6:	f000 f84b 	bl	8000550 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80004ba:	f000 f92e 	bl	800071a <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80004be:	204c      	movs	r0, #76	; 0x4c
 80004c0:	f000 f831 	bl	8000526 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80004c4:	f7ff ff24 	bl	8000310 <NRF24_flush_tx>
	NRF24_flush_rx();
 80004c8:	f7ff ff2a 	bl	8000320 <NRF24_flush_rx>
	
	NRF24_powerDown();
 80004cc:	f000 f916 	bl	80006fc <NRF24_powerDown>
	
}
 80004d0:	bf00      	nop
 80004d2:	3710      	adds	r7, #16
 80004d4:	46bd      	mov	sp, r7
 80004d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004da:	b002      	add	sp, #8
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	20000098 	.word	0x20000098
 80004e4:	20000090 	.word	0x20000090
 80004e8:	20000094 	.word	0x20000094
 80004ec:	20000096 	.word	0x20000096

080004f0 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	460a      	mov	r2, r1
 80004fa:	71fb      	strb	r3, [r7, #7]
 80004fc:	4613      	mov	r3, r2
 80004fe:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	011b      	lsls	r3, r3, #4
 8000504:	b25a      	sxtb	r2, r3
 8000506:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800050a:	f003 030f 	and.w	r3, r3, #15
 800050e:	b25b      	sxtb	r3, r3
 8000510:	4313      	orrs	r3, r2
 8000512:	b25b      	sxtb	r3, r3
 8000514:	b2db      	uxtb	r3, r3
 8000516:	4619      	mov	r1, r3
 8000518:	2004      	movs	r0, #4
 800051a:	f7ff feaf 	bl	800027c <NRF24_write_register>
}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b084      	sub	sp, #16
 800052a:	af00      	add	r7, sp, #0
 800052c:	4603      	mov	r3, r0
 800052e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000530:	237f      	movs	r3, #127	; 0x7f
 8000532:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000534:	7bfa      	ldrb	r2, [r7, #15]
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	4293      	cmp	r3, r2
 800053a:	bf28      	it	cs
 800053c:	4613      	movcs	r3, r2
 800053e:	b2db      	uxtb	r3, r3
 8000540:	4619      	mov	r1, r3
 8000542:	2005      	movs	r0, #5
 8000544:	f7ff fe9a 	bl	800027c <NRF24_write_register>
}
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}

08000550 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800055a:	2320      	movs	r3, #32
 800055c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800055e:	7bfa      	ldrb	r2, [r7, #15]
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	4293      	cmp	r3, r2
 8000564:	bf28      	it	cs
 8000566:	4613      	movcs	r3, r2
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b03      	ldr	r3, [pc, #12]	; (8000578 <NRF24_setPayloadSize+0x28>)
 800056c:	701a      	strb	r2, [r3, #0]
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	2000008c 	.word	0x2000008c

0800057c <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000580:	201d      	movs	r0, #29
 8000582:	f7ff fe2b 	bl	80001dc <NRF24_read_register>
 8000586:	4603      	mov	r3, r0
 8000588:	f023 0304 	bic.w	r3, r3, #4
 800058c:	b2db      	uxtb	r3, r3
 800058e:	4619      	mov	r1, r3
 8000590:	201d      	movs	r0, #29
 8000592:	f7ff fe73 	bl	800027c <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000596:	2100      	movs	r1, #0
 8000598:	201c      	movs	r0, #28
 800059a:	f7ff fe6f 	bl	800027c <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800059e:	4b02      	ldr	r3, [pc, #8]	; (80005a8 <NRF24_disableDynamicPayloads+0x2c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	2000008d 	.word	0x2000008d

080005ac <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80005b6:	2006      	movs	r0, #6
 80005b8:	f7ff fe10 	bl	80001dc <NRF24_read_register>
 80005bc:	4603      	mov	r3, r0
 80005be:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	f023 0306 	bic.w	r3, r3, #6
 80005c6:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	d104      	bne.n	80005d8 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	f043 0306 	orr.w	r3, r3, #6
 80005d4:	73fb      	strb	r3, [r7, #15]
 80005d6:	e019      	b.n	800060c <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d104      	bne.n	80005e8 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	73fb      	strb	r3, [r7, #15]
 80005e6:	e011      	b.n	800060c <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d104      	bne.n	80005f8 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	73fb      	strb	r3, [r7, #15]
 80005f6:	e009      	b.n	800060c <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d006      	beq.n	800060c <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b04      	cmp	r3, #4
 8000602:	d103      	bne.n	800060c <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	f043 0306 	orr.w	r3, r3, #6
 800060a:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	4619      	mov	r1, r3
 8000610:	2006      	movs	r0, #6
 8000612:	f7ff fe33 	bl	800027c <NRF24_write_register>
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 800062a:	2300      	movs	r3, #0
 800062c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800062e:	2006      	movs	r0, #6
 8000630:	f7ff fdd4 	bl	80001dc <NRF24_read_register>
 8000634:	4603      	mov	r3, r0
 8000636:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <NRF24_setDataRate+0x88>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800063e:	7bbb      	ldrb	r3, [r7, #14]
 8000640:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000644:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d107      	bne.n	800065c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <NRF24_setDataRate+0x88>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	f043 0320 	orr.w	r3, r3, #32
 8000658:	73bb      	strb	r3, [r7, #14]
 800065a:	e00d      	b.n	8000678 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d107      	bne.n	8000672 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <NRF24_setDataRate+0x88>)
 8000664:	2201      	movs	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000668:	7bbb      	ldrb	r3, [r7, #14]
 800066a:	f043 0308 	orr.w	r3, r3, #8
 800066e:	73bb      	strb	r3, [r7, #14]
 8000670:	e002      	b.n	8000678 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <NRF24_setDataRate+0x88>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000678:	7bbb      	ldrb	r3, [r7, #14]
 800067a:	4619      	mov	r1, r3
 800067c:	2006      	movs	r0, #6
 800067e:	f7ff fdfd 	bl	800027c <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000682:	2006      	movs	r0, #6
 8000684:	f7ff fdaa 	bl	80001dc <NRF24_read_register>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	7bbb      	ldrb	r3, [r7, #14]
 800068e:	4293      	cmp	r3, r2
 8000690:	d102      	bne.n	8000698 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000692:	2301      	movs	r3, #1
 8000694:	73fb      	strb	r3, [r7, #15]
 8000696:	e002      	b.n	800069e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <NRF24_setDataRate+0x88>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800069e:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000008e 	.word	0x2000008e

080006ac <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80006b6:	2000      	movs	r0, #0
 80006b8:	f7ff fd90 	bl	80001dc <NRF24_read_register>
 80006bc:	4603      	mov	r3, r0
 80006be:	f023 030c 	bic.w	r3, r3, #12
 80006c2:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d00f      	beq.n	80006ea <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d104      	bne.n	80006da <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	73fb      	strb	r3, [r7, #15]
 80006d8:	e007      	b.n	80006ea <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	4619      	mov	r1, r3
 80006ee:	2000      	movs	r0, #0
 80006f0:	f7ff fdc4 	bl	800027c <NRF24_write_register>
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff fd6b 	bl	80001dc <NRF24_read_register>
 8000706:	4603      	mov	r3, r0
 8000708:	f023 0302 	bic.w	r3, r3, #2
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4619      	mov	r1, r3
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff fdb3 	bl	800027c <NRF24_write_register>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}

0800071a <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800071e:	2170      	movs	r1, #112	; 0x70
 8000720:	2007      	movs	r0, #7
 8000722:	f7ff fdab 	bl	800027c <NRF24_write_register>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000732:	2000      	movs	r0, #0
 8000734:	f7ff fd12 	bl	800015c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000738:	2350      	movs	r3, #80	; 0x50
 800073a:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800073c:	2373      	movs	r3, #115	; 0x73
 800073e:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000740:	1d39      	adds	r1, r7, #4
 8000742:	2364      	movs	r3, #100	; 0x64
 8000744:	2202      	movs	r2, #2
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <NRF24_ACTIVATE_cmd+0x30>)
 8000748:	f001 fe44 	bl	80023d4 <HAL_SPI_Transmit>
	NRF24_csn(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f7ff fd05 	bl	800015c <NRF24_csn>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000098 	.word	0x20000098

08000760 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000762:	b0a1      	sub	sp, #132	; 0x84
 8000764:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	49c3      	ldr	r1, [pc, #780]	; (8000a78 <printRadioSettings+0x318>)
 800076c:	4618      	mov	r0, r3
 800076e:	f002 fd45 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fce8 	bl	800014c <strlen>
 800077c:	4603      	mov	r3, r0
 800077e:	b29a      	uxth	r2, r3
 8000780:	f107 0108 	add.w	r1, r7, #8
 8000784:	230a      	movs	r3, #10
 8000786:	48bd      	ldr	r0, [pc, #756]	; (8000a7c <printRadioSettings+0x31c>)
 8000788:	f002 fb78 	bl	8002e7c <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff fd25 	bl	80001dc <NRF24_read_register>
 8000792:	4603      	mov	r3, r0
 8000794:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000798:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800079c:	f003 0308 	and.w	r3, r3, #8
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d013      	beq.n	80007cc <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80007a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80007a8:	f003 0304 	and.w	r3, r3, #4
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d006      	beq.n	80007be <printRadioSettings+0x5e>
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	49b2      	ldr	r1, [pc, #712]	; (8000a80 <printRadioSettings+0x320>)
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 fd20 	bl	80031fc <siprintf>
 80007bc:	e00c      	b.n	80007d8 <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	49b0      	ldr	r1, [pc, #704]	; (8000a84 <printRadioSettings+0x324>)
 80007c4:	4618      	mov	r0, r3
 80007c6:	f002 fd19 	bl	80031fc <siprintf>
 80007ca:	e005      	b.n	80007d8 <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	49ad      	ldr	r1, [pc, #692]	; (8000a88 <printRadioSettings+0x328>)
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 fd12 	bl	80031fc <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fcb5 	bl	800014c <strlen>
 80007e2:	4603      	mov	r3, r0
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	f107 0108 	add.w	r1, r7, #8
 80007ea:	230a      	movs	r3, #10
 80007ec:	48a3      	ldr	r0, [pc, #652]	; (8000a7c <printRadioSettings+0x31c>)
 80007ee:	f002 fb45 	bl	8002e7c <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80007f2:	2001      	movs	r0, #1
 80007f4:	f7ff fcf2 	bl	80001dc <NRF24_read_register>
 80007f8:	4603      	mov	r3, r0
 80007fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80007fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000802:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000806:	2b00      	cmp	r3, #0
 8000808:	bfcc      	ite	gt
 800080a:	2301      	movgt	r3, #1
 800080c:	2300      	movle	r3, #0
 800080e:	b2db      	uxtb	r3, r3
 8000810:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000812:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000816:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800081a:	2b00      	cmp	r3, #0
 800081c:	bfcc      	ite	gt
 800081e:	2301      	movgt	r3, #1
 8000820:	2300      	movle	r3, #0
 8000822:	b2db      	uxtb	r3, r3
 8000824:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000826:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800082a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800082e:	2b00      	cmp	r3, #0
 8000830:	bfcc      	ite	gt
 8000832:	2301      	movgt	r3, #1
 8000834:	2300      	movle	r3, #0
 8000836:	b2db      	uxtb	r3, r3
 8000838:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800083a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800083e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000842:	2b00      	cmp	r3, #0
 8000844:	bfcc      	ite	gt
 8000846:	2301      	movgt	r3, #1
 8000848:	2300      	movle	r3, #0
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800084e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000852:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000856:	2b00      	cmp	r3, #0
 8000858:	bfcc      	ite	gt
 800085a:	2301      	movgt	r3, #1
 800085c:	2300      	movle	r3, #0
 800085e:	b2db      	uxtb	r3, r3
 8000860:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000862:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000866:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800086a:	2b00      	cmp	r3, #0
 800086c:	bfcc      	ite	gt
 800086e:	2301      	movgt	r3, #1
 8000870:	2300      	movle	r3, #0
 8000872:	b2db      	uxtb	r3, r3
 8000874:	f107 0008 	add.w	r0, r7, #8
 8000878:	9303      	str	r3, [sp, #12]
 800087a:	9402      	str	r4, [sp, #8]
 800087c:	9101      	str	r1, [sp, #4]
 800087e:	9200      	str	r2, [sp, #0]
 8000880:	4633      	mov	r3, r6
 8000882:	462a      	mov	r2, r5
 8000884:	4981      	ldr	r1, [pc, #516]	; (8000a8c <printRadioSettings+0x32c>)
 8000886:	f002 fcb9 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fc5c 	bl	800014c <strlen>
 8000894:	4603      	mov	r3, r0
 8000896:	b29a      	uxth	r2, r3
 8000898:	f107 0108 	add.w	r1, r7, #8
 800089c:	230a      	movs	r3, #10
 800089e:	4877      	ldr	r0, [pc, #476]	; (8000a7c <printRadioSettings+0x31c>)
 80008a0:	f002 faec 	bl	8002e7c <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80008a4:	2002      	movs	r0, #2
 80008a6:	f7ff fc99 	bl	80001dc <NRF24_read_register>
 80008aa:	4603      	mov	r3, r0
 80008ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80008b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80008b4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	bfcc      	ite	gt
 80008bc:	2301      	movgt	r3, #1
 80008be:	2300      	movle	r3, #0
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80008c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80008c8:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	bfcc      	ite	gt
 80008d0:	2301      	movgt	r3, #1
 80008d2:	2300      	movle	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80008d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80008dc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	bfcc      	ite	gt
 80008e4:	2301      	movgt	r3, #1
 80008e6:	2300      	movle	r3, #0
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80008ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80008f0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	bfcc      	ite	gt
 80008f8:	2301      	movgt	r3, #1
 80008fa:	2300      	movle	r3, #0
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000900:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000904:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000908:	2b00      	cmp	r3, #0
 800090a:	bfcc      	ite	gt
 800090c:	2301      	movgt	r3, #1
 800090e:	2300      	movle	r3, #0
 8000910:	b2db      	uxtb	r3, r3
 8000912:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000914:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000918:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800091c:	2b00      	cmp	r3, #0
 800091e:	bfcc      	ite	gt
 8000920:	2301      	movgt	r3, #1
 8000922:	2300      	movle	r3, #0
 8000924:	b2db      	uxtb	r3, r3
 8000926:	f107 0008 	add.w	r0, r7, #8
 800092a:	9303      	str	r3, [sp, #12]
 800092c:	9402      	str	r4, [sp, #8]
 800092e:	9101      	str	r1, [sp, #4]
 8000930:	9200      	str	r2, [sp, #0]
 8000932:	4633      	mov	r3, r6
 8000934:	462a      	mov	r2, r5
 8000936:	4956      	ldr	r1, [pc, #344]	; (8000a90 <printRadioSettings+0x330>)
 8000938:	f002 fc60 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fc03 	bl	800014c <strlen>
 8000946:	4603      	mov	r3, r0
 8000948:	b29a      	uxth	r2, r3
 800094a:	f107 0108 	add.w	r1, r7, #8
 800094e:	230a      	movs	r3, #10
 8000950:	484a      	ldr	r0, [pc, #296]	; (8000a7c <printRadioSettings+0x31c>)
 8000952:	f002 fa93 	bl	8002e7c <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000956:	2003      	movs	r0, #3
 8000958:	f7ff fc40 	bl	80001dc <NRF24_read_register>
 800095c:	4603      	mov	r3, r0
 800095e:	f003 0303 	and.w	r3, r3, #3
 8000962:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8000966:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800096a:	3302      	adds	r3, #2
 800096c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000970:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	4946      	ldr	r1, [pc, #280]	; (8000a94 <printRadioSettings+0x334>)
 800097a:	4618      	mov	r0, r3
 800097c:	f002 fc3e 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fbe1 	bl	800014c <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	b29a      	uxth	r2, r3
 800098e:	f107 0108 	add.w	r1, r7, #8
 8000992:	230a      	movs	r3, #10
 8000994:	4839      	ldr	r0, [pc, #228]	; (8000a7c <printRadioSettings+0x31c>)
 8000996:	f002 fa71 	bl	8002e7c <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800099a:	2005      	movs	r0, #5
 800099c:	f7ff fc1e 	bl	80001dc <NRF24_read_register>
 80009a0:	4603      	mov	r3, r0
 80009a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80009a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80009aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	4939      	ldr	r1, [pc, #228]	; (8000a98 <printRadioSettings+0x338>)
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 fc21 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fbc4 	bl	800014c <strlen>
 80009c4:	4603      	mov	r3, r0
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	f107 0108 	add.w	r1, r7, #8
 80009cc:	230a      	movs	r3, #10
 80009ce:	482b      	ldr	r0, [pc, #172]	; (8000a7c <printRadioSettings+0x31c>)
 80009d0:	f002 fa54 	bl	8002e7c <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80009d4:	2006      	movs	r0, #6
 80009d6:	f7ff fc01 	bl	80001dc <NRF24_read_register>
 80009da:	4603      	mov	r3, r0
 80009dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80009e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80009e4:	f003 0308 	and.w	r3, r3, #8
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d006      	beq.n	80009fa <printRadioSettings+0x29a>
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	492a      	ldr	r1, [pc, #168]	; (8000a9c <printRadioSettings+0x33c>)
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 fc02 	bl	80031fc <siprintf>
 80009f8:	e005      	b.n	8000a06 <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	4928      	ldr	r1, [pc, #160]	; (8000aa0 <printRadioSettings+0x340>)
 8000a00:	4618      	mov	r0, r3
 8000a02:	f002 fbfb 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fb9e 	bl	800014c <strlen>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	f107 0108 	add.w	r1, r7, #8
 8000a18:	230a      	movs	r3, #10
 8000a1a:	4818      	ldr	r0, [pc, #96]	; (8000a7c <printRadioSettings+0x31c>)
 8000a1c:	f002 fa2e 	bl	8002e7c <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000a20:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a24:	f003 0306 	and.w	r3, r3, #6
 8000a28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8000a2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000a36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d106      	bne.n	8000a4c <printRadioSettings+0x2ec>
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	4918      	ldr	r1, [pc, #96]	; (8000aa4 <printRadioSettings+0x344>)
 8000a44:	4618      	mov	r0, r3
 8000a46:	f002 fbd9 	bl	80031fc <siprintf>
 8000a4a:	e03b      	b.n	8000ac4 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000a4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d106      	bne.n	8000a62 <printRadioSettings+0x302>
 8000a54:	f107 0308 	add.w	r3, r7, #8
 8000a58:	4913      	ldr	r1, [pc, #76]	; (8000aa8 <printRadioSettings+0x348>)
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f002 fbce 	bl	80031fc <siprintf>
 8000a60:	e030      	b.n	8000ac4 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000a62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d122      	bne.n	8000ab0 <printRadioSettings+0x350>
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	490f      	ldr	r1, [pc, #60]	; (8000aac <printRadioSettings+0x34c>)
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 fbc3 	bl	80031fc <siprintf>
 8000a76:	e025      	b.n	8000ac4 <printRadioSettings+0x364>
 8000a78:	08003aec 	.word	0x08003aec
 8000a7c:	200000f0 	.word	0x200000f0
 8000a80:	08003b20 	.word	0x08003b20
 8000a84:	08003b3c 	.word	0x08003b3c
 8000a88:	08003b58 	.word	0x08003b58
 8000a8c:	08003b6c 	.word	0x08003b6c
 8000a90:	08003bb0 	.word	0x08003bb0
 8000a94:	08003bfc 	.word	0x08003bfc
 8000a98:	08003c18 	.word	0x08003c18
 8000a9c:	08003c2c 	.word	0x08003c2c
 8000aa0:	08003c44 	.word	0x08003c44
 8000aa4:	08003c5c 	.word	0x08003c5c
 8000aa8:	08003c70 	.word	0x08003c70
 8000aac:	08003c84 	.word	0x08003c84
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000ab0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d105      	bne.n	8000ac4 <printRadioSettings+0x364>
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	49d7      	ldr	r1, [pc, #860]	; (8000e1c <printRadioSettings+0x6bc>)
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f002 fb9c 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ac4:	f107 0308 	add.w	r3, r7, #8
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fb3f 	bl	800014c <strlen>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	f107 0108 	add.w	r1, r7, #8
 8000ad6:	230a      	movs	r3, #10
 8000ad8:	48d1      	ldr	r0, [pc, #836]	; (8000e20 <printRadioSettings+0x6c0>)
 8000ada:	f002 f9cf 	bl	8002e7c <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2205      	movs	r2, #5
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	200a      	movs	r0, #10
 8000ae6:	f7ff fba1 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000aea:	793b      	ldrb	r3, [r7, #4]
 8000aec:	461c      	mov	r4, r3
 8000aee:	78fb      	ldrb	r3, [r7, #3]
 8000af0:	461d      	mov	r5, r3
 8000af2:	78bb      	ldrb	r3, [r7, #2]
 8000af4:	787a      	ldrb	r2, [r7, #1]
 8000af6:	7839      	ldrb	r1, [r7, #0]
 8000af8:	f107 0008 	add.w	r0, r7, #8
 8000afc:	9102      	str	r1, [sp, #8]
 8000afe:	9201      	str	r2, [sp, #4]
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	462b      	mov	r3, r5
 8000b04:	4622      	mov	r2, r4
 8000b06:	49c7      	ldr	r1, [pc, #796]	; (8000e24 <printRadioSettings+0x6c4>)
 8000b08:	f002 fb78 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fb1b 	bl	800014c <strlen>
 8000b16:	4603      	mov	r3, r0
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	f107 0108 	add.w	r1, r7, #8
 8000b1e:	230a      	movs	r3, #10
 8000b20:	48bf      	ldr	r0, [pc, #764]	; (8000e20 <printRadioSettings+0x6c0>)
 8000b22:	f002 f9ab 	bl	8002e7c <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8000b26:	463b      	mov	r3, r7
 8000b28:	2205      	movs	r2, #5
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	200b      	movs	r0, #11
 8000b2e:	f7ff fb7d 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000b32:	793b      	ldrb	r3, [r7, #4]
 8000b34:	461c      	mov	r4, r3
 8000b36:	78fb      	ldrb	r3, [r7, #3]
 8000b38:	461d      	mov	r5, r3
 8000b3a:	78bb      	ldrb	r3, [r7, #2]
 8000b3c:	787a      	ldrb	r2, [r7, #1]
 8000b3e:	7839      	ldrb	r1, [r7, #0]
 8000b40:	f107 0008 	add.w	r0, r7, #8
 8000b44:	9102      	str	r1, [sp, #8]
 8000b46:	9201      	str	r2, [sp, #4]
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	462b      	mov	r3, r5
 8000b4c:	4622      	mov	r2, r4
 8000b4e:	49b6      	ldr	r1, [pc, #728]	; (8000e28 <printRadioSettings+0x6c8>)
 8000b50:	f002 fb54 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff faf7 	bl	800014c <strlen>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	f107 0108 	add.w	r1, r7, #8
 8000b66:	230a      	movs	r3, #10
 8000b68:	48ad      	ldr	r0, [pc, #692]	; (8000e20 <printRadioSettings+0x6c0>)
 8000b6a:	f002 f987 	bl	8002e7c <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2201      	movs	r2, #1
 8000b72:	4619      	mov	r1, r3
 8000b74:	200c      	movs	r0, #12
 8000b76:	f7ff fb59 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000b7a:	783b      	ldrb	r3, [r7, #0]
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	49aa      	ldr	r1, [pc, #680]	; (8000e2c <printRadioSettings+0x6cc>)
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 fb39 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fadc 	bl	800014c <strlen>
 8000b94:	4603      	mov	r3, r0
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	f107 0108 	add.w	r1, r7, #8
 8000b9c:	230a      	movs	r3, #10
 8000b9e:	48a0      	ldr	r0, [pc, #640]	; (8000e20 <printRadioSettings+0x6c0>)
 8000ba0:	f002 f96c 	bl	8002e7c <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4619      	mov	r1, r3
 8000baa:	200d      	movs	r0, #13
 8000bac:	f7ff fb3e 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000bb0:	783b      	ldrb	r3, [r7, #0]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	499d      	ldr	r1, [pc, #628]	; (8000e30 <printRadioSettings+0x6d0>)
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 fb1e 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fac1 	bl	800014c <strlen>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	f107 0108 	add.w	r1, r7, #8
 8000bd2:	230a      	movs	r3, #10
 8000bd4:	4892      	ldr	r0, [pc, #584]	; (8000e20 <printRadioSettings+0x6c0>)
 8000bd6:	f002 f951 	bl	8002e7c <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4619      	mov	r1, r3
 8000be0:	200e      	movs	r0, #14
 8000be2:	f7ff fb23 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000be6:	783b      	ldrb	r3, [r7, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	4991      	ldr	r1, [pc, #580]	; (8000e34 <printRadioSettings+0x6d4>)
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f002 fb03 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff faa6 	bl	800014c <strlen>
 8000c00:	4603      	mov	r3, r0
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	f107 0108 	add.w	r1, r7, #8
 8000c08:	230a      	movs	r3, #10
 8000c0a:	4885      	ldr	r0, [pc, #532]	; (8000e20 <printRadioSettings+0x6c0>)
 8000c0c:	f002 f936 	bl	8002e7c <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8000c10:	463b      	mov	r3, r7
 8000c12:	2201      	movs	r2, #1
 8000c14:	4619      	mov	r1, r3
 8000c16:	200f      	movs	r0, #15
 8000c18:	f7ff fb08 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000c1c:	783b      	ldrb	r3, [r7, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	4984      	ldr	r1, [pc, #528]	; (8000e38 <printRadioSettings+0x6d8>)
 8000c26:	4618      	mov	r0, r3
 8000c28:	f002 fae8 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fa8b 	bl	800014c <strlen>
 8000c36:	4603      	mov	r3, r0
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	f107 0108 	add.w	r1, r7, #8
 8000c3e:	230a      	movs	r3, #10
 8000c40:	4877      	ldr	r0, [pc, #476]	; (8000e20 <printRadioSettings+0x6c0>)
 8000c42:	f002 f91b 	bl	8002e7c <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8000c46:	463b      	mov	r3, r7
 8000c48:	2205      	movs	r2, #5
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	2010      	movs	r0, #16
 8000c4e:	f7ff faed 	bl	800022c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000c52:	793b      	ldrb	r3, [r7, #4]
 8000c54:	461c      	mov	r4, r3
 8000c56:	78fb      	ldrb	r3, [r7, #3]
 8000c58:	461d      	mov	r5, r3
 8000c5a:	78bb      	ldrb	r3, [r7, #2]
 8000c5c:	787a      	ldrb	r2, [r7, #1]
 8000c5e:	7839      	ldrb	r1, [r7, #0]
 8000c60:	f107 0008 	add.w	r0, r7, #8
 8000c64:	9102      	str	r1, [sp, #8]
 8000c66:	9201      	str	r2, [sp, #4]
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	462b      	mov	r3, r5
 8000c6c:	4622      	mov	r2, r4
 8000c6e:	4973      	ldr	r1, [pc, #460]	; (8000e3c <printRadioSettings+0x6dc>)
 8000c70:	f002 fac4 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c74:	f107 0308 	add.w	r3, r7, #8
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fa67 	bl	800014c <strlen>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	f107 0108 	add.w	r1, r7, #8
 8000c86:	230a      	movs	r3, #10
 8000c88:	4865      	ldr	r0, [pc, #404]	; (8000e20 <printRadioSettings+0x6c0>)
 8000c8a:	f002 f8f7 	bl	8002e7c <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8000c8e:	2011      	movs	r0, #17
 8000c90:	f7ff faa4 	bl	80001dc <NRF24_read_register>
 8000c94:	4603      	mov	r3, r0
 8000c96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000c9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	4966      	ldr	r1, [pc, #408]	; (8000e40 <printRadioSettings+0x6e0>)
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 faa7 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fa4a 	bl	800014c <strlen>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	f107 0108 	add.w	r1, r7, #8
 8000cc0:	230a      	movs	r3, #10
 8000cc2:	4857      	ldr	r0, [pc, #348]	; (8000e20 <printRadioSettings+0x6c0>)
 8000cc4:	f002 f8da 	bl	8002e7c <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8000cc8:	2012      	movs	r0, #18
 8000cca:	f7ff fa87 	bl	80001dc <NRF24_read_register>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000cd4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	4958      	ldr	r1, [pc, #352]	; (8000e44 <printRadioSettings+0x6e4>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f002 fa8a 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ce8:	f107 0308 	add.w	r3, r7, #8
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fa2d 	bl	800014c <strlen>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	f107 0108 	add.w	r1, r7, #8
 8000cfa:	230a      	movs	r3, #10
 8000cfc:	4848      	ldr	r0, [pc, #288]	; (8000e20 <printRadioSettings+0x6c0>)
 8000cfe:	f002 f8bd 	bl	8002e7c <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8000d02:	2013      	movs	r0, #19
 8000d04:	f7ff fa6a 	bl	80001dc <NRF24_read_register>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000d0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	494b      	ldr	r1, [pc, #300]	; (8000e48 <printRadioSettings+0x6e8>)
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 fa6d 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d22:	f107 0308 	add.w	r3, r7, #8
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fa10 	bl	800014c <strlen>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	f107 0108 	add.w	r1, r7, #8
 8000d34:	230a      	movs	r3, #10
 8000d36:	483a      	ldr	r0, [pc, #232]	; (8000e20 <printRadioSettings+0x6c0>)
 8000d38:	f002 f8a0 	bl	8002e7c <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8000d3c:	2014      	movs	r0, #20
 8000d3e:	f7ff fa4d 	bl	80001dc <NRF24_read_register>
 8000d42:	4603      	mov	r3, r0
 8000d44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000d48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000d50:	f107 0308 	add.w	r3, r7, #8
 8000d54:	493d      	ldr	r1, [pc, #244]	; (8000e4c <printRadioSettings+0x6ec>)
 8000d56:	4618      	mov	r0, r3
 8000d58:	f002 fa50 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d5c:	f107 0308 	add.w	r3, r7, #8
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff f9f3 	bl	800014c <strlen>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	f107 0108 	add.w	r1, r7, #8
 8000d6e:	230a      	movs	r3, #10
 8000d70:	482b      	ldr	r0, [pc, #172]	; (8000e20 <printRadioSettings+0x6c0>)
 8000d72:	f002 f883 	bl	8002e7c <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8000d76:	2015      	movs	r0, #21
 8000d78:	f7ff fa30 	bl	80001dc <NRF24_read_register>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000d82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	4930      	ldr	r1, [pc, #192]	; (8000e50 <printRadioSettings+0x6f0>)
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 fa33 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff f9d6 	bl	800014c <strlen>
 8000da0:	4603      	mov	r3, r0
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	f107 0108 	add.w	r1, r7, #8
 8000da8:	230a      	movs	r3, #10
 8000daa:	481d      	ldr	r0, [pc, #116]	; (8000e20 <printRadioSettings+0x6c0>)
 8000dac:	f002 f866 	bl	8002e7c <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8000db0:	2016      	movs	r0, #22
 8000db2:	f7ff fa13 	bl	80001dc <NRF24_read_register>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8000dbc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dc0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000dc4:	f107 0308 	add.w	r3, r7, #8
 8000dc8:	4922      	ldr	r1, [pc, #136]	; (8000e54 <printRadioSettings+0x6f4>)
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f002 fa16 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000dd0:	f107 0308 	add.w	r3, r7, #8
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff f9b9 	bl	800014c <strlen>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	f107 0108 	add.w	r1, r7, #8
 8000de2:	230a      	movs	r3, #10
 8000de4:	480e      	ldr	r0, [pc, #56]	; (8000e20 <printRadioSettings+0x6c0>)
 8000de6:	f002 f849 	bl	8002e7c <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8000dea:	201c      	movs	r0, #28
 8000dec:	f7ff f9f6 	bl	80001dc <NRF24_read_register>
 8000df0:	4603      	mov	r3, r0
 8000df2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000df6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dfa:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bfcc      	ite	gt
 8000e02:	2301      	movgt	r3, #1
 8000e04:	2300      	movle	r3, #0
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e0e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	bfcc      	ite	gt
 8000e16:	2301      	movgt	r3, #1
 8000e18:	2300      	movle	r3, #0
 8000e1a:	e01d      	b.n	8000e58 <printRadioSettings+0x6f8>
 8000e1c:	08003c98 	.word	0x08003c98
 8000e20:	200000f0 	.word	0x200000f0
 8000e24:	08003cac 	.word	0x08003cac
 8000e28:	08003cdc 	.word	0x08003cdc
 8000e2c:	08003d0c 	.word	0x08003d0c
 8000e30:	08003d34 	.word	0x08003d34
 8000e34:	08003d5c 	.word	0x08003d5c
 8000e38:	08003d84 	.word	0x08003d84
 8000e3c:	08003dac 	.word	0x08003dac
 8000e40:	08003dd8 	.word	0x08003dd8
 8000e44:	08003df4 	.word	0x08003df4
 8000e48:	08003e10 	.word	0x08003e10
 8000e4c:	08003e2c 	.word	0x08003e2c
 8000e50:	08003e48 	.word	0x08003e48
 8000e54:	08003e64 	.word	0x08003e64
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e60:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	bfcc      	ite	gt
 8000e68:	2301      	movgt	r3, #1
 8000e6a:	2300      	movle	r3, #0
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e74:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	bfcc      	ite	gt
 8000e7c:	2301      	movgt	r3, #1
 8000e7e:	2300      	movle	r3, #0
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e88:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	bfcc      	ite	gt
 8000e90:	2301      	movgt	r3, #1
 8000e92:	2300      	movle	r3, #0
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000e98:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e9c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	bfcc      	ite	gt
 8000ea4:	2301      	movgt	r3, #1
 8000ea6:	2300      	movle	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	f107 0008 	add.w	r0, r7, #8
 8000eae:	9303      	str	r3, [sp, #12]
 8000eb0:	9402      	str	r4, [sp, #8]
 8000eb2:	9101      	str	r1, [sp, #4]
 8000eb4:	9200      	str	r2, [sp, #0]
 8000eb6:	4633      	mov	r3, r6
 8000eb8:	462a      	mov	r2, r5
 8000eba:	4936      	ldr	r1, [pc, #216]	; (8000f94 <printRadioSettings+0x834>)
 8000ebc:	f002 f99e 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff f941 	bl	800014c <strlen>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	f107 0108 	add.w	r1, r7, #8
 8000ed2:	230a      	movs	r3, #10
 8000ed4:	4830      	ldr	r0, [pc, #192]	; (8000f98 <printRadioSettings+0x838>)
 8000ed6:	f001 ffd1 	bl	8002e7c <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8000eda:	201d      	movs	r0, #29
 8000edc:	f7ff f97e 	bl	80001dc <NRF24_read_register>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8000ee6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d006      	beq.n	8000f00 <printRadioSettings+0x7a0>
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	4929      	ldr	r1, [pc, #164]	; (8000f9c <printRadioSettings+0x83c>)
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f002 f97f 	bl	80031fc <siprintf>
 8000efe:	e005      	b.n	8000f0c <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	4926      	ldr	r1, [pc, #152]	; (8000fa0 <printRadioSettings+0x840>)
 8000f06:	4618      	mov	r0, r3
 8000f08:	f002 f978 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f0c:	f107 0308 	add.w	r3, r7, #8
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff f91b 	bl	800014c <strlen>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	f107 0108 	add.w	r1, r7, #8
 8000f1e:	230a      	movs	r3, #10
 8000f20:	481d      	ldr	r0, [pc, #116]	; (8000f98 <printRadioSettings+0x838>)
 8000f22:	f001 ffab 	bl	8002e7c <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8000f26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <printRadioSettings+0x7e0>
 8000f32:	f107 0308 	add.w	r3, r7, #8
 8000f36:	491b      	ldr	r1, [pc, #108]	; (8000fa4 <printRadioSettings+0x844>)
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f002 f95f 	bl	80031fc <siprintf>
 8000f3e:	e005      	b.n	8000f4c <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8000f40:	f107 0308 	add.w	r3, r7, #8
 8000f44:	4918      	ldr	r1, [pc, #96]	; (8000fa8 <printRadioSettings+0x848>)
 8000f46:	4618      	mov	r0, r3
 8000f48:	f002 f958 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff f8fb 	bl	800014c <strlen>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	f107 0108 	add.w	r1, r7, #8
 8000f5e:	230a      	movs	r3, #10
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <printRadioSettings+0x838>)
 8000f62:	f001 ff8b 	bl	8002e7c <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	4910      	ldr	r1, [pc, #64]	; (8000fac <printRadioSettings+0x84c>)
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 f945 	bl	80031fc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff f8e8 	bl	800014c <strlen>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	f107 0108 	add.w	r1, r7, #8
 8000f84:	230a      	movs	r3, #10
 8000f86:	4804      	ldr	r0, [pc, #16]	; (8000f98 <printRadioSettings+0x838>)
 8000f88:	f001 ff78 	bl	8002e7c <HAL_UART_Transmit>
}
 8000f8c:	bf00      	nop
 8000f8e:	3774      	adds	r7, #116	; 0x74
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f94:	08003e80 	.word	0x08003e80
 8000f98:	200000f0 	.word	0x200000f0
 8000f9c:	08003ecc 	.word	0x08003ecc
 8000fa0:	08003ee4 	.word	0x08003ee4
 8000fa4:	08003efc 	.word	0x08003efc
 8000fa8:	08003f18 	.word	0x08003f18
 8000fac:	08003aec 	.word	0x08003aec

08000fb0 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	f107 0c08 	add.w	ip, r7, #8
 8000fba:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <nrf24_DebugUART_Init+0x2c>)
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	2248      	movs	r2, #72	; 0x48
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f002 f901 	bl	80031d0 <memcpy>
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fd6:	b004      	add	sp, #16
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	200000f0 	.word	0x200000f0

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	b097      	sub	sp, #92	; 0x5c
 8000fe4:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe6:	f000 fa5b 	bl	80014a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fea:	f000 f831 	bl	8001050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fee:	f000 f8d1 	bl	8001194 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ff2:	f000 f86f 	bl	80010d4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000ff6:	f000 f8a3 	bl	8001140 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  NRF24_begin(CEpin_GPIO_Port, CSNpin_Pin,CEpin_Pin, hspi1);
 8000ffa:	4c12      	ldr	r4, [pc, #72]	; (8001044 <main+0x64>)
 8000ffc:	4668      	mov	r0, sp
 8000ffe:	1d23      	adds	r3, r4, #4
 8001000:	2254      	movs	r2, #84	; 0x54
 8001002:	4619      	mov	r1, r3
 8001004:	f002 f8e4 	bl	80031d0 <memcpy>
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800100e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <main+0x68>)
 8001014:	f7ff f98c 	bl	8000330 <NRF24_begin>
  nrf24_DebugUART_Init(huart2);
 8001018:	4e0c      	ldr	r6, [pc, #48]	; (800104c <main+0x6c>)
 800101a:	466d      	mov	r5, sp
 800101c:	f106 0410 	add.w	r4, r6, #16
 8001020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800102a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800102c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001030:	e885 0003 	stmia.w	r5, {r0, r1}
 8001034:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001038:	f7ff ffba 	bl	8000fb0 <nrf24_DebugUART_Init>
  printRadioSettings();
 800103c:	f7ff fb90 	bl	8000760 <printRadioSettings>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001040:	e7fe      	b.n	8001040 <main+0x60>
 8001042:	bf00      	nop
 8001044:	20000138 	.word	0x20000138
 8001048:	40010c00 	.word	0x40010c00
 800104c:	20000190 	.word	0x20000190

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b090      	sub	sp, #64	; 0x40
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 0318 	add.w	r3, r7, #24
 800105a:	2228      	movs	r2, #40	; 0x28
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f002 f8c4 	bl	80031ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001072:	2302      	movs	r3, #2
 8001074:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001076:	2301      	movs	r3, #1
 8001078:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800107a:	2310      	movs	r3, #16
 800107c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107e:	2302      	movs	r3, #2
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001082:	2300      	movs	r3, #0
 8001084:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001086:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108c:	f107 0318 	add.w	r3, r7, #24
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fd0b 	bl	8001aac <HAL_RCC_OscConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800109c:	f000 f8ba 	bl	8001214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a0:	230f      	movs	r3, #15
 80010a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a4:	2302      	movs	r3, #2
 80010a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2102      	movs	r1, #2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 ff78 	bl	8001fb0 <HAL_RCC_ClockConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80010c6:	f000 f8a5 	bl	8001214 <Error_Handler>
  }
}
 80010ca:	bf00      	nop
 80010cc:	3740      	adds	r7, #64	; 0x40
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_SPI1_Init+0x64>)
 80010da:	4a18      	ldr	r2, [pc, #96]	; (800113c <MX_SPI1_Init+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_SPI1_Init+0x64>)
 80010e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_SPI1_Init+0x64>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_SPI1_Init+0x64>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <MX_SPI1_Init+0x64>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_SPI1_Init+0x64>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <MX_SPI1_Init+0x64>)
 8001100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001104:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_SPI1_Init+0x64>)
 8001108:	2220      	movs	r2, #32
 800110a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <MX_SPI1_Init+0x64>)
 800110e:	2200      	movs	r2, #0
 8001110:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_SPI1_Init+0x64>)
 8001114:	2200      	movs	r2, #0
 8001116:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <MX_SPI1_Init+0x64>)
 800111a:	2200      	movs	r2, #0
 800111c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_SPI1_Init+0x64>)
 8001120:	220a      	movs	r2, #10
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_SPI1_Init+0x64>)
 8001126:	f001 f8d1 	bl	80022cc <HAL_SPI_Init>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001130:	f000 f870 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000138 	.word	0x20000138
 800113c:	40013000 	.word	0x40013000

08001140 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_USART2_UART_Init+0x50>)
 8001148:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800114c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001150:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001178:	f001 fe30 	bl	8002ddc <HAL_UART_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001182:	f000 f847 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000190 	.word	0x20000190
 8001190:	40004400 	.word	0x40004400

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <MX_GPIO_Init+0x78>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a17      	ldr	r2, [pc, #92]	; (800120c <MX_GPIO_Init+0x78>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <MX_GPIO_Init+0x78>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_GPIO_Init+0x78>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a11      	ldr	r2, [pc, #68]	; (800120c <MX_GPIO_Init+0x78>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_GPIO_Init+0x78>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSNpin_Pin|CEpin_Pin, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 7140 	mov.w	r1, #768	; 0x300
 80011de:	480c      	ldr	r0, [pc, #48]	; (8001210 <MX_GPIO_Init+0x7c>)
 80011e0:	f000 fc4c 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSNpin_Pin CEpin_Pin */
  GPIO_InitStruct.Pin = CSNpin_Pin|CEpin_Pin;
 80011e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2302      	movs	r3, #2
 80011f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	4619      	mov	r1, r3
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <MX_GPIO_Init+0x7c>)
 80011fe:	f000 fab9 	bl	8001774 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	40010c00 	.word	0x40010c00

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	e7fe      	b.n	800121c <Error_Handler+0x8>
	...

08001220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <HAL_MspInit+0x40>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <HAL_MspInit+0x40>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6193      	str	r3, [r2, #24]
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <HAL_MspInit+0x40>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_MspInit+0x40>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_MspInit+0x40>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	61d3      	str	r3, [r2, #28]
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_MspInit+0x40>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	40021000 	.word	0x40021000

08001264 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <HAL_SPI_MspInit+0x88>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d12f      	bne.n	80012e4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_SPI_MspInit+0x8c>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <HAL_SPI_MspInit+0x8c>)
 800128a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <HAL_SPI_MspInit+0x8c>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <HAL_SPI_MspInit+0x8c>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <HAL_SPI_MspInit+0x8c>)
 80012a2:	f043 0304 	orr.w	r3, r3, #4
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_SPI_MspInit+0x8c>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012b4:	23a0      	movs	r3, #160	; 0xa0
 80012b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	480b      	ldr	r0, [pc, #44]	; (80012f4 <HAL_SPI_MspInit+0x90>)
 80012c8:	f000 fa54 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012cc:	2340      	movs	r3, #64	; 0x40
 80012ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0310 	add.w	r3, r7, #16
 80012dc:	4619      	mov	r1, r3
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <HAL_SPI_MspInit+0x90>)
 80012e0:	f000 fa48 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012e4:	bf00      	nop
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40013000 	.word	0x40013000
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010800 	.word	0x40010800

080012f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0310 	add.w	r3, r7, #16
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <HAL_UART_MspInit+0x88>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d12f      	bne.n	8001378 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <HAL_UART_MspInit+0x8c>)
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	4a19      	ldr	r2, [pc, #100]	; (8001384 <HAL_UART_MspInit+0x8c>)
 800131e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001322:	61d3      	str	r3, [r2, #28]
 8001324:	4b17      	ldr	r3, [pc, #92]	; (8001384 <HAL_UART_MspInit+0x8c>)
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <HAL_UART_MspInit+0x8c>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a13      	ldr	r2, [pc, #76]	; (8001384 <HAL_UART_MspInit+0x8c>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_UART_MspInit+0x8c>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001348:	2304      	movs	r3, #4
 800134a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001350:	2303      	movs	r3, #3
 8001352:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	4619      	mov	r1, r3
 800135a:	480b      	ldr	r0, [pc, #44]	; (8001388 <HAL_UART_MspInit+0x90>)
 800135c:	f000 fa0a 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001360:	2308      	movs	r3, #8
 8001362:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	4619      	mov	r1, r3
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <HAL_UART_MspInit+0x90>)
 8001374:	f000 f9fe 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001378:	bf00      	nop
 800137a:	3720      	adds	r7, #32
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40004400 	.word	0x40004400
 8001384:	40021000 	.word	0x40021000
 8001388:	40010800 	.word	0x40010800

0800138c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <NMI_Handler+0x4>

08001392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <HardFault_Handler+0x4>

08001398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <MemManage_Handler+0x4>

0800139e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <UsageFault_Handler+0x4>

080013aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d2:	f000 f8ab 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <_sbrk+0x5c>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <_sbrk+0x60>)
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <_sbrk+0x64>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <_sbrk+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800140c:	f001 feb6 	bl	800317c <__errno>
 8001410:	4603      	mov	r3, r0
 8001412:	220c      	movs	r2, #12
 8001414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	e009      	b.n	8001430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <_sbrk+0x64>)
 800142c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20005000 	.word	0x20005000
 800143c:	00000400 	.word	0x00000400
 8001440:	200001d8 	.word	0x200001d8
 8001444:	200001f0 	.word	0x200001f0

08001448 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001454:	f7ff fff8 	bl	8001448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001458:	480b      	ldr	r0, [pc, #44]	; (8001488 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800145a:	490c      	ldr	r1, [pc, #48]	; (800148c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800145c:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <LoopFillZerobss+0x16>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001460:	e002      	b.n	8001468 <LoopCopyDataInit>

08001462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001466:	3304      	adds	r3, #4

08001468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800146c:	d3f9      	bcc.n	8001462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146e:	4a09      	ldr	r2, [pc, #36]	; (8001494 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001470:	4c09      	ldr	r4, [pc, #36]	; (8001498 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001474:	e001      	b.n	800147a <LoopFillZerobss>

08001476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001478:	3204      	adds	r2, #4

0800147a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800147c:	d3fb      	bcc.n	8001476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800147e:	f001 fe83 	bl	8003188 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001482:	f7ff fdad 	bl	8000fe0 <main>
  bx lr
 8001486:	4770      	bx	lr
  ldr r0, =_sdata
 8001488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800148c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001490:	08004098 	.word	0x08004098
  ldr r2, =_sbss
 8001494:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001498:	200001f0 	.word	0x200001f0

0800149c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800149c:	e7fe      	b.n	800149c <ADC1_2_IRQHandler>
	...

080014a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_Init+0x28>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_Init+0x28>)
 80014aa:	f043 0310 	orr.w	r3, r3, #16
 80014ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 f92b 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b6:	200f      	movs	r0, #15
 80014b8:	f000 f808 	bl	80014cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014bc:	f7ff feb0 	bl	8001220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40022000 	.word	0x40022000

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_InitTick+0x54>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_InitTick+0x58>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f935 	bl	800175a <HAL_SYSTICK_Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00e      	b.n	8001518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d80a      	bhi.n	8001516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f000 f90b 	bl	8001722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800150c:	4a06      	ldr	r2, [pc, #24]	; (8001528 <HAL_InitTick+0x5c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000000 	.word	0x20000000
 8001524:	20000008 	.word	0x20000008
 8001528:	20000004 	.word	0x20000004

0800152c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_IncTick+0x1c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_IncTick+0x20>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a03      	ldr	r2, [pc, #12]	; (800154c <HAL_IncTick+0x20>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	20000008 	.word	0x20000008
 800154c:	200001dc 	.word	0x200001dc

08001550 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b02      	ldr	r3, [pc, #8]	; (8001560 <HAL_GetTick+0x10>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	200001dc 	.word	0x200001dc

08001564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800156c:	f7ff fff0 	bl	8001550 <HAL_GetTick>
 8001570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800157c:	d005      	beq.n	800158a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <HAL_Delay+0x44>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4413      	add	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800158a:	bf00      	nop
 800158c:	f7ff ffe0 	bl	8001550 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	429a      	cmp	r2, r3
 800159a:	d8f7      	bhi.n	800158c <HAL_Delay+0x28>
  {
  }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000008 	.word	0x20000008

080015ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <__NVIC_SetPriorityGrouping+0x44>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c8:	4013      	ands	r3, r2
 80015ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015de:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <__NVIC_SetPriorityGrouping+0x44>)
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	60d3      	str	r3, [r2, #12]
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <__NVIC_GetPriorityGrouping+0x18>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	0a1b      	lsrs	r3, r3, #8
 80015fe:	f003 0307 	and.w	r3, r3, #7
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	db0a      	blt.n	800163a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	490c      	ldr	r1, [pc, #48]	; (800165c <__NVIC_SetPriority+0x4c>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	0112      	lsls	r2, r2, #4
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	440b      	add	r3, r1
 8001634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001638:	e00a      	b.n	8001650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4908      	ldr	r1, [pc, #32]	; (8001660 <__NVIC_SetPriority+0x50>)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	3b04      	subs	r3, #4
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	440b      	add	r3, r1
 800164e:	761a      	strb	r2, [r3, #24]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000e100 	.word	0xe000e100
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f1c3 0307 	rsb	r3, r3, #7
 800167e:	2b04      	cmp	r3, #4
 8001680:	bf28      	it	cs
 8001682:	2304      	movcs	r3, #4
 8001684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3304      	adds	r3, #4
 800168a:	2b06      	cmp	r3, #6
 800168c:	d902      	bls.n	8001694 <NVIC_EncodePriority+0x30>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3b03      	subs	r3, #3
 8001692:	e000      	b.n	8001696 <NVIC_EncodePriority+0x32>
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	f04f 32ff 	mov.w	r2, #4294967295
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	401a      	ands	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	4313      	orrs	r3, r2
         );
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3724      	adds	r7, #36	; 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff90 	bl	8001610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff49 	bl	80015ac <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001734:	f7ff ff5e 	bl	80015f4 <__NVIC_GetPriorityGrouping>
 8001738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	6978      	ldr	r0, [r7, #20]
 8001740:	f7ff ff90 	bl	8001664 <NVIC_EncodePriority>
 8001744:	4602      	mov	r2, r0
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff5f 	bl	8001610 <__NVIC_SetPriority>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ffb0 	bl	80016c8 <SysTick_Config>
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b08b      	sub	sp, #44	; 0x2c
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001786:	e169      	b.n	8001a5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001788:	2201      	movs	r2, #1
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	f040 8158 	bne.w	8001a56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4a9a      	ldr	r2, [pc, #616]	; (8001a14 <HAL_GPIO_Init+0x2a0>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d05e      	beq.n	800186e <HAL_GPIO_Init+0xfa>
 80017b0:	4a98      	ldr	r2, [pc, #608]	; (8001a14 <HAL_GPIO_Init+0x2a0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d875      	bhi.n	80018a2 <HAL_GPIO_Init+0x12e>
 80017b6:	4a98      	ldr	r2, [pc, #608]	; (8001a18 <HAL_GPIO_Init+0x2a4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d058      	beq.n	800186e <HAL_GPIO_Init+0xfa>
 80017bc:	4a96      	ldr	r2, [pc, #600]	; (8001a18 <HAL_GPIO_Init+0x2a4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d86f      	bhi.n	80018a2 <HAL_GPIO_Init+0x12e>
 80017c2:	4a96      	ldr	r2, [pc, #600]	; (8001a1c <HAL_GPIO_Init+0x2a8>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d052      	beq.n	800186e <HAL_GPIO_Init+0xfa>
 80017c8:	4a94      	ldr	r2, [pc, #592]	; (8001a1c <HAL_GPIO_Init+0x2a8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d869      	bhi.n	80018a2 <HAL_GPIO_Init+0x12e>
 80017ce:	4a94      	ldr	r2, [pc, #592]	; (8001a20 <HAL_GPIO_Init+0x2ac>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d04c      	beq.n	800186e <HAL_GPIO_Init+0xfa>
 80017d4:	4a92      	ldr	r2, [pc, #584]	; (8001a20 <HAL_GPIO_Init+0x2ac>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d863      	bhi.n	80018a2 <HAL_GPIO_Init+0x12e>
 80017da:	4a92      	ldr	r2, [pc, #584]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d046      	beq.n	800186e <HAL_GPIO_Init+0xfa>
 80017e0:	4a90      	ldr	r2, [pc, #576]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d85d      	bhi.n	80018a2 <HAL_GPIO_Init+0x12e>
 80017e6:	2b12      	cmp	r3, #18
 80017e8:	d82a      	bhi.n	8001840 <HAL_GPIO_Init+0xcc>
 80017ea:	2b12      	cmp	r3, #18
 80017ec:	d859      	bhi.n	80018a2 <HAL_GPIO_Init+0x12e>
 80017ee:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <HAL_GPIO_Init+0x80>)
 80017f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f4:	0800186f 	.word	0x0800186f
 80017f8:	08001849 	.word	0x08001849
 80017fc:	0800185b 	.word	0x0800185b
 8001800:	0800189d 	.word	0x0800189d
 8001804:	080018a3 	.word	0x080018a3
 8001808:	080018a3 	.word	0x080018a3
 800180c:	080018a3 	.word	0x080018a3
 8001810:	080018a3 	.word	0x080018a3
 8001814:	080018a3 	.word	0x080018a3
 8001818:	080018a3 	.word	0x080018a3
 800181c:	080018a3 	.word	0x080018a3
 8001820:	080018a3 	.word	0x080018a3
 8001824:	080018a3 	.word	0x080018a3
 8001828:	080018a3 	.word	0x080018a3
 800182c:	080018a3 	.word	0x080018a3
 8001830:	080018a3 	.word	0x080018a3
 8001834:	080018a3 	.word	0x080018a3
 8001838:	08001851 	.word	0x08001851
 800183c:	08001865 	.word	0x08001865
 8001840:	4a79      	ldr	r2, [pc, #484]	; (8001a28 <HAL_GPIO_Init+0x2b4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d013      	beq.n	800186e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001846:	e02c      	b.n	80018a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	623b      	str	r3, [r7, #32]
          break;
 800184e:	e029      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	3304      	adds	r3, #4
 8001856:	623b      	str	r3, [r7, #32]
          break;
 8001858:	e024      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	3308      	adds	r3, #8
 8001860:	623b      	str	r3, [r7, #32]
          break;
 8001862:	e01f      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	330c      	adds	r3, #12
 800186a:	623b      	str	r3, [r7, #32]
          break;
 800186c:	e01a      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001876:	2304      	movs	r3, #4
 8001878:	623b      	str	r3, [r7, #32]
          break;
 800187a:	e013      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d105      	bne.n	8001890 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001884:	2308      	movs	r3, #8
 8001886:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	611a      	str	r2, [r3, #16]
          break;
 800188e:	e009      	b.n	80018a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001890:	2308      	movs	r3, #8
 8001892:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	615a      	str	r2, [r3, #20]
          break;
 800189a:	e003      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
          break;
 80018a0:	e000      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          break;
 80018a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2bff      	cmp	r3, #255	; 0xff
 80018a8:	d801      	bhi.n	80018ae <HAL_GPIO_Init+0x13a>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	e001      	b.n	80018b2 <HAL_GPIO_Init+0x13e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3304      	adds	r3, #4
 80018b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2bff      	cmp	r3, #255	; 0xff
 80018b8:	d802      	bhi.n	80018c0 <HAL_GPIO_Init+0x14c>
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	e002      	b.n	80018c6 <HAL_GPIO_Init+0x152>
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	3b08      	subs	r3, #8
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	210f      	movs	r1, #15
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	401a      	ands	r2, r3
 80018d8:	6a39      	ldr	r1, [r7, #32]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	431a      	orrs	r2, r3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 80b1 	beq.w	8001a56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018f4:	4b4d      	ldr	r3, [pc, #308]	; (8001a2c <HAL_GPIO_Init+0x2b8>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a4c      	ldr	r2, [pc, #304]	; (8001a2c <HAL_GPIO_Init+0x2b8>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b4a      	ldr	r3, [pc, #296]	; (8001a2c <HAL_GPIO_Init+0x2b8>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800190c:	4a48      	ldr	r2, [pc, #288]	; (8001a30 <HAL_GPIO_Init+0x2bc>)
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	089b      	lsrs	r3, r3, #2
 8001912:	3302      	adds	r3, #2
 8001914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001918:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	220f      	movs	r2, #15
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4013      	ands	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a40      	ldr	r2, [pc, #256]	; (8001a34 <HAL_GPIO_Init+0x2c0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d013      	beq.n	8001960 <HAL_GPIO_Init+0x1ec>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a3f      	ldr	r2, [pc, #252]	; (8001a38 <HAL_GPIO_Init+0x2c4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d00d      	beq.n	800195c <HAL_GPIO_Init+0x1e8>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a3e      	ldr	r2, [pc, #248]	; (8001a3c <HAL_GPIO_Init+0x2c8>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d007      	beq.n	8001958 <HAL_GPIO_Init+0x1e4>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a3d      	ldr	r2, [pc, #244]	; (8001a40 <HAL_GPIO_Init+0x2cc>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d101      	bne.n	8001954 <HAL_GPIO_Init+0x1e0>
 8001950:	2303      	movs	r3, #3
 8001952:	e006      	b.n	8001962 <HAL_GPIO_Init+0x1ee>
 8001954:	2304      	movs	r3, #4
 8001956:	e004      	b.n	8001962 <HAL_GPIO_Init+0x1ee>
 8001958:	2302      	movs	r3, #2
 800195a:	e002      	b.n	8001962 <HAL_GPIO_Init+0x1ee>
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <HAL_GPIO_Init+0x1ee>
 8001960:	2300      	movs	r3, #0
 8001962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001964:	f002 0203 	and.w	r2, r2, #3
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	4093      	lsls	r3, r2
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001972:	492f      	ldr	r1, [pc, #188]	; (8001a30 <HAL_GPIO_Init+0x2bc>)
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3302      	adds	r3, #2
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d006      	beq.n	800199a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800198c:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	492c      	ldr	r1, [pc, #176]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	608b      	str	r3, [r1, #8]
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800199a:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	4928      	ldr	r1, [pc, #160]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019b4:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	4922      	ldr	r1, [pc, #136]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	60cb      	str	r3, [r1, #12]
 80019c0:	e006      	b.n	80019d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	491e      	ldr	r1, [pc, #120]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4918      	ldr	r1, [pc, #96]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	4914      	ldr	r1, [pc, #80]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d021      	beq.n	8001a48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	490e      	ldr	r1, [pc, #56]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
 8001a10:	e021      	b.n	8001a56 <HAL_GPIO_Init+0x2e2>
 8001a12:	bf00      	nop
 8001a14:	10320000 	.word	0x10320000
 8001a18:	10310000 	.word	0x10310000
 8001a1c:	10220000 	.word	0x10220000
 8001a20:	10210000 	.word	0x10210000
 8001a24:	10120000 	.word	0x10120000
 8001a28:	10110000 	.word	0x10110000
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010000 	.word	0x40010000
 8001a34:	40010800 	.word	0x40010800
 8001a38:	40010c00 	.word	0x40010c00
 8001a3c:	40011000 	.word	0x40011000
 8001a40:	40011400 	.word	0x40011400
 8001a44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_GPIO_Init+0x304>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	4909      	ldr	r1, [pc, #36]	; (8001a78 <HAL_GPIO_Init+0x304>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	3301      	adds	r3, #1
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	fa22 f303 	lsr.w	r3, r2, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f47f ae8e 	bne.w	8001788 <HAL_GPIO_Init+0x14>
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	372c      	adds	r7, #44	; 0x2c
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	40010400 	.word	0x40010400

08001a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a8c:	787b      	ldrb	r3, [r7, #1]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a98:	e003      	b.n	8001aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	041a      	lsls	r2, r3, #16
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	611a      	str	r2, [r3, #16]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e272      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 8087 	beq.w	8001bda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001acc:	4b92      	ldr	r3, [pc, #584]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d00c      	beq.n	8001af2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ad8:	4b8f      	ldr	r3, [pc, #572]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d112      	bne.n	8001b0a <HAL_RCC_OscConfig+0x5e>
 8001ae4:	4b8c      	ldr	r3, [pc, #560]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af0:	d10b      	bne.n	8001b0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af2:	4b89      	ldr	r3, [pc, #548]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d06c      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x12c>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d168      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e24c      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b12:	d106      	bne.n	8001b22 <HAL_RCC_OscConfig+0x76>
 8001b14:	4b80      	ldr	r3, [pc, #512]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a7f      	ldr	r2, [pc, #508]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	e02e      	b.n	8001b80 <HAL_RCC_OscConfig+0xd4>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x98>
 8001b2a:	4b7b      	ldr	r3, [pc, #492]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a7a      	ldr	r2, [pc, #488]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	4b78      	ldr	r3, [pc, #480]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a77      	ldr	r2, [pc, #476]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e01d      	b.n	8001b80 <HAL_RCC_OscConfig+0xd4>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b4c:	d10c      	bne.n	8001b68 <HAL_RCC_OscConfig+0xbc>
 8001b4e:	4b72      	ldr	r3, [pc, #456]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a71      	ldr	r2, [pc, #452]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b6f      	ldr	r3, [pc, #444]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a6e      	ldr	r2, [pc, #440]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e00b      	b.n	8001b80 <HAL_RCC_OscConfig+0xd4>
 8001b68:	4b6b      	ldr	r3, [pc, #428]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a6a      	ldr	r2, [pc, #424]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	4b68      	ldr	r3, [pc, #416]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a67      	ldr	r2, [pc, #412]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d013      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff fce2 	bl	8001550 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b90:	f7ff fcde 	bl	8001550 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	; 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e200      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b5d      	ldr	r3, [pc, #372]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0xe4>
 8001bae:	e014      	b.n	8001bda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fcce 	bl	8001550 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb8:	f7ff fcca 	bl	8001550 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b64      	cmp	r3, #100	; 0x64
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e1ec      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bca:	4b53      	ldr	r3, [pc, #332]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x10c>
 8001bd6:	e000      	b.n	8001bda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d063      	beq.n	8001cae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001be6:	4b4c      	ldr	r3, [pc, #304]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00b      	beq.n	8001c0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bf2:	4b49      	ldr	r3, [pc, #292]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d11c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x18c>
 8001bfe:	4b46      	ldr	r3, [pc, #280]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d116      	bne.n	8001c38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0a:	4b43      	ldr	r3, [pc, #268]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d005      	beq.n	8001c22 <HAL_RCC_OscConfig+0x176>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d001      	beq.n	8001c22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e1c0      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c22:	4b3d      	ldr	r3, [pc, #244]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4939      	ldr	r1, [pc, #228]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c36:	e03a      	b.n	8001cae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d020      	beq.n	8001c82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c40:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c46:	f7ff fc83 	bl	8001550 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4e:	f7ff fc7f 	bl	8001550 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e1a1      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	4b2d      	ldr	r3, [pc, #180]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6c:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4927      	ldr	r1, [pc, #156]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	600b      	str	r3, [r1, #0]
 8001c80:	e015      	b.n	8001cae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c82:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <HAL_RCC_OscConfig+0x270>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff fc62 	bl	8001550 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c90:	f7ff fc5e 	bl	8001550 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e180      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca2:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d03a      	beq.n	8001d30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d019      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_RCC_OscConfig+0x274>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc8:	f7ff fc42 	bl	8001550 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd0:	f7ff fc3e 	bl	8001550 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e160      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f000 face 	bl	8002290 <RCC_Delay>
 8001cf4:	e01c      	b.n	8001d30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	; (8001d20 <HAL_RCC_OscConfig+0x274>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfc:	f7ff fc28 	bl	8001550 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d02:	e00f      	b.n	8001d24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d04:	f7ff fc24 	bl	8001550 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d908      	bls.n	8001d24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e146      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4f8>
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	42420000 	.word	0x42420000
 8001d20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d24:	4b92      	ldr	r3, [pc, #584]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1e9      	bne.n	8001d04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 80a6 	beq.w	8001e8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d42:	4b8b      	ldr	r3, [pc, #556]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10d      	bne.n	8001d6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	4b88      	ldr	r3, [pc, #544]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	4a87      	ldr	r2, [pc, #540]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d58:	61d3      	str	r3, [r2, #28]
 8001d5a:	4b85      	ldr	r3, [pc, #532]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d66:	2301      	movs	r3, #1
 8001d68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6a:	4b82      	ldr	r3, [pc, #520]	; (8001f74 <HAL_RCC_OscConfig+0x4c8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d118      	bne.n	8001da8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d76:	4b7f      	ldr	r3, [pc, #508]	; (8001f74 <HAL_RCC_OscConfig+0x4c8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a7e      	ldr	r2, [pc, #504]	; (8001f74 <HAL_RCC_OscConfig+0x4c8>)
 8001d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d82:	f7ff fbe5 	bl	8001550 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8a:	f7ff fbe1 	bl	8001550 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b64      	cmp	r3, #100	; 0x64
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e103      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	4b75      	ldr	r3, [pc, #468]	; (8001f74 <HAL_RCC_OscConfig+0x4c8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d106      	bne.n	8001dbe <HAL_RCC_OscConfig+0x312>
 8001db0:	4b6f      	ldr	r3, [pc, #444]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4a6e      	ldr	r2, [pc, #440]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6213      	str	r3, [r2, #32]
 8001dbc:	e02d      	b.n	8001e1a <HAL_RCC_OscConfig+0x36e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x334>
 8001dc6:	4b6a      	ldr	r3, [pc, #424]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a69      	ldr	r2, [pc, #420]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	6213      	str	r3, [r2, #32]
 8001dd2:	4b67      	ldr	r3, [pc, #412]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4a66      	ldr	r2, [pc, #408]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	f023 0304 	bic.w	r3, r3, #4
 8001ddc:	6213      	str	r3, [r2, #32]
 8001dde:	e01c      	b.n	8001e1a <HAL_RCC_OscConfig+0x36e>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b05      	cmp	r3, #5
 8001de6:	d10c      	bne.n	8001e02 <HAL_RCC_OscConfig+0x356>
 8001de8:	4b61      	ldr	r3, [pc, #388]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	4a60      	ldr	r2, [pc, #384]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	f043 0304 	orr.w	r3, r3, #4
 8001df2:	6213      	str	r3, [r2, #32]
 8001df4:	4b5e      	ldr	r3, [pc, #376]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	4a5d      	ldr	r2, [pc, #372]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6213      	str	r3, [r2, #32]
 8001e00:	e00b      	b.n	8001e1a <HAL_RCC_OscConfig+0x36e>
 8001e02:	4b5b      	ldr	r3, [pc, #364]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	4a5a      	ldr	r2, [pc, #360]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	6213      	str	r3, [r2, #32]
 8001e0e:	4b58      	ldr	r3, [pc, #352]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	4a57      	ldr	r2, [pc, #348]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	f023 0304 	bic.w	r3, r3, #4
 8001e18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d015      	beq.n	8001e4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e22:	f7ff fb95 	bl	8001550 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7ff fb91 	bl	8001550 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e0b1      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e40:	4b4b      	ldr	r3, [pc, #300]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0ee      	beq.n	8001e2a <HAL_RCC_OscConfig+0x37e>
 8001e4c:	e014      	b.n	8001e78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4e:	f7ff fb7f 	bl	8001550 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7ff fb7b 	bl	8001550 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e09b      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6c:	4b40      	ldr	r3, [pc, #256]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1ee      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e78:	7dfb      	ldrb	r3, [r7, #23]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d105      	bne.n	8001e8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7e:	4b3c      	ldr	r3, [pc, #240]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	4a3b      	ldr	r2, [pc, #236]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8087 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e94:	4b36      	ldr	r3, [pc, #216]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d061      	beq.n	8001f64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d146      	bne.n	8001f36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea8:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <HAL_RCC_OscConfig+0x4cc>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eae:	f7ff fb4f 	bl	8001550 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7ff fb4b 	bl	8001550 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e06d      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec8:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f0      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001edc:	d108      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ede:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	4921      	ldr	r1, [pc, #132]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef0:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a19      	ldr	r1, [r3, #32]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	430b      	orrs	r3, r1
 8001f02:	491b      	ldr	r1, [pc, #108]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f08:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_RCC_OscConfig+0x4cc>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0e:	f7ff fb1f 	bl	8001550 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f16:	f7ff fb1b 	bl	8001550 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e03d      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x46a>
 8001f34:	e035      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <HAL_RCC_OscConfig+0x4cc>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fb08 	bl	8001550 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f44:	f7ff fb04 	bl	8001550 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e026      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x498>
 8001f62:	e01e      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d107      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e019      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4f8>
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40007000 	.word	0x40007000
 8001f78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_RCC_OscConfig+0x500>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d106      	bne.n	8001f9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d001      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40021000 	.word	0x40021000

08001fb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0d0      	b.n	8002166 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b6a      	ldr	r3, [pc, #424]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d910      	bls.n	8001ff4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b67      	ldr	r3, [pc, #412]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 0207 	bic.w	r2, r3, #7
 8001fda:	4965      	ldr	r1, [pc, #404]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b63      	ldr	r3, [pc, #396]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0b8      	b.n	8002166 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d020      	beq.n	8002042 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800200c:	4b59      	ldr	r3, [pc, #356]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	4a58      	ldr	r2, [pc, #352]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002016:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002024:	4b53      	ldr	r3, [pc, #332]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4a52      	ldr	r2, [pc, #328]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800202e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002030:	4b50      	ldr	r3, [pc, #320]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	494d      	ldr	r1, [pc, #308]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d040      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d107      	bne.n	8002066 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	4b47      	ldr	r3, [pc, #284]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d115      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e07f      	b.n	8002166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206e:	4b41      	ldr	r3, [pc, #260]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e073      	b.n	8002166 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207e:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e06b      	b.n	8002166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800208e:	4b39      	ldr	r3, [pc, #228]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f023 0203 	bic.w	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4936      	ldr	r1, [pc, #216]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 800209c:	4313      	orrs	r3, r2
 800209e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a0:	f7ff fa56 	bl	8001550 <HAL_GetTick>
 80020a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	e00a      	b.n	80020be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a8:	f7ff fa52 	bl	8001550 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e053      	b.n	8002166 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 020c 	and.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d1eb      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d0:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d210      	bcs.n	8002100 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 0207 	bic.w	r2, r3, #7
 80020e6:	4922      	ldr	r1, [pc, #136]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b20      	ldr	r3, [pc, #128]	; (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e032      	b.n	8002166 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4916      	ldr	r1, [pc, #88]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	4313      	orrs	r3, r2
 800211c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d009      	beq.n	800213e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800212a:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	490e      	ldr	r1, [pc, #56]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800213e:	f000 f821 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8002142:	4602      	mov	r2, r0
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	490a      	ldr	r1, [pc, #40]	; (8002178 <HAL_RCC_ClockConfig+0x1c8>)
 8002150:	5ccb      	ldrb	r3, [r1, r3]
 8002152:	fa22 f303 	lsr.w	r3, r2, r3
 8002156:	4a09      	ldr	r2, [pc, #36]	; (800217c <HAL_RCC_ClockConfig+0x1cc>)
 8002158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_RCC_ClockConfig+0x1d0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff f9b4 	bl	80014cc <HAL_InitTick>

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40022000 	.word	0x40022000
 8002174:	40021000 	.word	0x40021000
 8002178:	08004030 	.word	0x08004030
 800217c:	20000000 	.word	0x20000000
 8002180:	20000004 	.word	0x20000004

08002184 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002184:	b480      	push	{r7}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800219e:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <HAL_RCC_GetSysClockFreq+0x94>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d002      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x30>
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d003      	beq.n	80021ba <HAL_RCC_GetSysClockFreq+0x36>
 80021b2:	e027      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_RCC_GetSysClockFreq+0x98>)
 80021b6:	613b      	str	r3, [r7, #16]
      break;
 80021b8:	e027      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	0c9b      	lsrs	r3, r3, #18
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	4a17      	ldr	r2, [pc, #92]	; (8002220 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021c4:	5cd3      	ldrb	r3, [r2, r3]
 80021c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d010      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <HAL_RCC_GetSysClockFreq+0x94>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	0c5b      	lsrs	r3, r3, #17
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	4a11      	ldr	r2, [pc, #68]	; (8002224 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a0d      	ldr	r2, [pc, #52]	; (800221c <HAL_RCC_GetSysClockFreq+0x98>)
 80021e6:	fb03 f202 	mul.w	r2, r3, r2
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	e004      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021f8:	fb02 f303 	mul.w	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	613b      	str	r3, [r7, #16]
      break;
 8002202:	e002      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <HAL_RCC_GetSysClockFreq+0x98>)
 8002206:	613b      	str	r3, [r7, #16]
      break;
 8002208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800220a:	693b      	ldr	r3, [r7, #16]
}
 800220c:	4618      	mov	r0, r3
 800220e:	371c      	adds	r7, #28
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000
 800221c:	007a1200 	.word	0x007a1200
 8002220:	08004048 	.word	0x08004048
 8002224:	08004058 	.word	0x08004058
 8002228:	003d0900 	.word	0x003d0900

0800222c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002230:	4b02      	ldr	r3, [pc, #8]	; (800223c <HAL_RCC_GetHCLKFreq+0x10>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	20000000 	.word	0x20000000

08002240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002244:	f7ff fff2 	bl	800222c <HAL_RCC_GetHCLKFreq>
 8002248:	4602      	mov	r2, r0
 800224a:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	4903      	ldr	r1, [pc, #12]	; (8002264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002256:	5ccb      	ldrb	r3, [r1, r3]
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800225c:	4618      	mov	r0, r3
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40021000 	.word	0x40021000
 8002264:	08004040 	.word	0x08004040

08002268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800226c:	f7ff ffde 	bl	800222c <HAL_RCC_GetHCLKFreq>
 8002270:	4602      	mov	r2, r0
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	0adb      	lsrs	r3, r3, #11
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	4903      	ldr	r1, [pc, #12]	; (800228c <HAL_RCC_GetPCLK2Freq+0x24>)
 800227e:	5ccb      	ldrb	r3, [r1, r3]
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	08004040 	.word	0x08004040

08002290 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002298:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <RCC_Delay+0x34>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <RCC_Delay+0x38>)
 800229e:	fba2 2303 	umull	r2, r3, r2, r3
 80022a2:	0a5b      	lsrs	r3, r3, #9
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	fb02 f303 	mul.w	r3, r2, r3
 80022aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022ac:	bf00      	nop
  }
  while (Delay --);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1e5a      	subs	r2, r3, #1
 80022b2:	60fa      	str	r2, [r7, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f9      	bne.n	80022ac <RCC_Delay+0x1c>
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	20000000 	.word	0x20000000
 80022c8:	10624dd3 	.word	0x10624dd3

080022cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e076      	b.n	80023cc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d108      	bne.n	80022f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022ee:	d009      	beq.n	8002304 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
 80022f6:	e005      	b.n	8002304 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe ffa0 	bl	8001264 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800233a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002388:	ea42 0103 	orr.w	r1, r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	0c1a      	lsrs	r2, r3, #16
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f002 0204 	and.w	r2, r2, #4
 80023aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	69da      	ldr	r2, [r3, #28]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	4613      	mov	r3, r2
 80023e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_SPI_Transmit+0x22>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e12d      	b.n	8002652 <HAL_SPI_Transmit+0x27e>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023fe:	f7ff f8a7 	bl	8001550 <HAL_GetTick>
 8002402:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b01      	cmp	r3, #1
 8002412:	d002      	beq.n	800241a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002414:	2302      	movs	r3, #2
 8002416:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002418:	e116      	b.n	8002648 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <HAL_SPI_Transmit+0x52>
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d102      	bne.n	800242c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	77fb      	strb	r3, [r7, #31]
    goto error;
 800242a:	e10d      	b.n	8002648 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2203      	movs	r2, #3
 8002430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	88fa      	ldrh	r2, [r7, #6]
 8002444:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	88fa      	ldrh	r2, [r7, #6]
 800244a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002472:	d10f      	bne.n	8002494 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002482:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002492:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249e:	2b40      	cmp	r3, #64	; 0x40
 80024a0:	d007      	beq.n	80024b2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ba:	d14f      	bne.n	800255c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <HAL_SPI_Transmit+0xf6>
 80024c4:	8afb      	ldrh	r3, [r7, #22]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d142      	bne.n	8002550 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	881a      	ldrh	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	1c9a      	adds	r2, r3, #2
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024ee:	e02f      	b.n	8002550 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d112      	bne.n	8002524 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	881a      	ldrh	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	1c9a      	adds	r2, r3, #2
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	86da      	strh	r2, [r3, #54]	; 0x36
 8002522:	e015      	b.n	8002550 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002524:	f7ff f814 	bl	8001550 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d803      	bhi.n	800253c <HAL_SPI_Transmit+0x168>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253a:	d102      	bne.n	8002542 <HAL_SPI_Transmit+0x16e>
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d106      	bne.n	8002550 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800254e:	e07b      	b.n	8002648 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1ca      	bne.n	80024f0 <HAL_SPI_Transmit+0x11c>
 800255a:	e050      	b.n	80025fe <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_SPI_Transmit+0x196>
 8002564:	8afb      	ldrh	r3, [r7, #22]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d144      	bne.n	80025f4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	330c      	adds	r3, #12
 8002574:	7812      	ldrb	r2, [r2, #0]
 8002576:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002590:	e030      	b.n	80025f4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b02      	cmp	r3, #2
 800259e:	d113      	bne.n	80025c8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	330c      	adds	r3, #12
 80025aa:	7812      	ldrb	r2, [r2, #0]
 80025ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80025c6:	e015      	b.n	80025f4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025c8:	f7fe ffc2 	bl	8001550 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d803      	bhi.n	80025e0 <HAL_SPI_Transmit+0x20c>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025de:	d102      	bne.n	80025e6 <HAL_SPI_Transmit+0x212>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80025f2:	e029      	b.n	8002648 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1c9      	bne.n	8002592 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	6839      	ldr	r1, [r7, #0]
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 fbcc 	bl	8002da0 <SPI_EndRxTxTransaction>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2220      	movs	r2, #32
 8002612:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10a      	bne.n	8002632 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800261c:	2300      	movs	r3, #0
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	77fb      	strb	r3, [r7, #31]
 800263e:	e003      	b.n	8002648 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002650:	7ffb      	ldrb	r3, [r7, #31]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3720      	adds	r7, #32
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b088      	sub	sp, #32
 800265e:	af02      	add	r7, sp, #8
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	4613      	mov	r3, r2
 8002668:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	d002      	beq.n	8002680 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800267a:	2302      	movs	r3, #2
 800267c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800267e:	e0fb      	b.n	8002878 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002688:	d112      	bne.n	80026b0 <HAL_SPI_Receive+0x56>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10e      	bne.n	80026b0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2204      	movs	r2, #4
 8002696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800269a:	88fa      	ldrh	r2, [r7, #6]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	4613      	mov	r3, r2
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f8ef 	bl	800288a <HAL_SPI_TransmitReceive>
 80026ac:	4603      	mov	r3, r0
 80026ae:	e0e8      	b.n	8002882 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_SPI_Receive+0x64>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e0e1      	b.n	8002882 <HAL_SPI_Receive+0x228>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026c6:	f7fe ff43 	bl	8001550 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HAL_SPI_Receive+0x7e>
 80026d2:	88fb      	ldrh	r3, [r7, #6]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d102      	bne.n	80026de <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80026dc:	e0cc      	b.n	8002878 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2204      	movs	r2, #4
 80026e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	88fa      	ldrh	r2, [r7, #6]
 80026f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	88fa      	ldrh	r2, [r7, #6]
 80026fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002724:	d10f      	bne.n	8002746 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002734:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002744:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002750:	2b40      	cmp	r3, #64	; 0x40
 8002752:	d007      	beq.n	8002764 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002762:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d16a      	bne.n	8002842 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800276c:	e032      	b.n	80027d4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	d115      	bne.n	80027a8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f103 020c 	add.w	r2, r3, #12
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002788:	7812      	ldrb	r2, [r2, #0]
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027a6:	e015      	b.n	80027d4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027a8:	f7fe fed2 	bl	8001550 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d803      	bhi.n	80027c0 <HAL_SPI_Receive+0x166>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027be:	d102      	bne.n	80027c6 <HAL_SPI_Receive+0x16c>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80027d2:	e051      	b.n	8002878 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1c7      	bne.n	800276e <HAL_SPI_Receive+0x114>
 80027de:	e035      	b.n	800284c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d113      	bne.n	8002816 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f8:	b292      	uxth	r2, r2
 80027fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	1c9a      	adds	r2, r3, #2
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002814:	e015      	b.n	8002842 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002816:	f7fe fe9b 	bl	8001550 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d803      	bhi.n	800282e <HAL_SPI_Receive+0x1d4>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d102      	bne.n	8002834 <HAL_SPI_Receive+0x1da>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d106      	bne.n	8002842 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002840:	e01a      	b.n	8002878 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002846:	b29b      	uxth	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1c9      	bne.n	80027e0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	6839      	ldr	r1, [r7, #0]
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fa53 	bl	8002cfc <SPI_EndRxTransaction>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d002      	beq.n	8002862 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	75fb      	strb	r3, [r7, #23]
 800286e:	e003      	b.n	8002878 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002880:	7dfb      	ldrb	r3, [r7, #23]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b08c      	sub	sp, #48	; 0x30
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
 8002896:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002898:	2301      	movs	r3, #1
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_SPI_TransmitReceive+0x26>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e198      	b.n	8002be2 <HAL_SPI_TransmitReceive+0x358>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028b8:	f7fe fe4a 	bl	8001550 <HAL_GetTick>
 80028bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80028ce:	887b      	ldrh	r3, [r7, #2]
 80028d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d00f      	beq.n	80028fa <HAL_SPI_TransmitReceive+0x70>
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028e0:	d107      	bne.n	80028f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d103      	bne.n	80028f2 <HAL_SPI_TransmitReceive+0x68>
 80028ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d003      	beq.n	80028fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80028f2:	2302      	movs	r3, #2
 80028f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80028f8:	e16d      	b.n	8002bd6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_SPI_TransmitReceive+0x82>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <HAL_SPI_TransmitReceive+0x82>
 8002906:	887b      	ldrh	r3, [r7, #2]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002912:	e160      	b.n	8002bd6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b04      	cmp	r3, #4
 800291e:	d003      	beq.n	8002928 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2205      	movs	r2, #5
 8002924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	887a      	ldrh	r2, [r7, #2]
 8002938:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	887a      	ldrh	r2, [r7, #2]
 800293e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	887a      	ldrh	r2, [r7, #2]
 800294a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	887a      	ldrh	r2, [r7, #2]
 8002950:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002968:	2b40      	cmp	r3, #64	; 0x40
 800296a:	d007      	beq.n	800297c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800297a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002984:	d17c      	bne.n	8002a80 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_SPI_TransmitReceive+0x10a>
 800298e:	8b7b      	ldrh	r3, [r7, #26]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d16a      	bne.n	8002a6a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002998:	881a      	ldrh	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	1c9a      	adds	r2, r3, #2
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029b8:	e057      	b.n	8002a6a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d11b      	bne.n	8002a00 <HAL_SPI_TransmitReceive+0x176>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d016      	beq.n	8002a00 <HAL_SPI_TransmitReceive+0x176>
 80029d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d113      	bne.n	8002a00 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	881a      	ldrh	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	1c9a      	adds	r2, r3, #2
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d119      	bne.n	8002a42 <HAL_SPI_TransmitReceive+0x1b8>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d014      	beq.n	8002a42 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	b292      	uxth	r2, r2
 8002a24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	1c9a      	adds	r2, r3, #2
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a42:	f7fe fd85 	bl	8001550 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d80b      	bhi.n	8002a6a <HAL_SPI_TransmitReceive+0x1e0>
 8002a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d007      	beq.n	8002a6a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002a68:	e0b5      	b.n	8002bd6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1a2      	bne.n	80029ba <HAL_SPI_TransmitReceive+0x130>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d19d      	bne.n	80029ba <HAL_SPI_TransmitReceive+0x130>
 8002a7e:	e080      	b.n	8002b82 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <HAL_SPI_TransmitReceive+0x204>
 8002a88:	8b7b      	ldrh	r3, [r7, #26]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d16f      	bne.n	8002b6e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	330c      	adds	r3, #12
 8002a98:	7812      	ldrb	r2, [r2, #0]
 8002a9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ab4:	e05b      	b.n	8002b6e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d11c      	bne.n	8002afe <HAL_SPI_TransmitReceive+0x274>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d017      	beq.n	8002afe <HAL_SPI_TransmitReceive+0x274>
 8002ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d114      	bne.n	8002afe <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	330c      	adds	r3, #12
 8002ade:	7812      	ldrb	r2, [r2, #0]
 8002ae0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d119      	bne.n	8002b40 <HAL_SPI_TransmitReceive+0x2b6>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d014      	beq.n	8002b40 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b40:	f7fe fd06 	bl	8001550 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d803      	bhi.n	8002b58 <HAL_SPI_TransmitReceive+0x2ce>
 8002b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b56:	d102      	bne.n	8002b5e <HAL_SPI_TransmitReceive+0x2d4>
 8002b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d107      	bne.n	8002b6e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002b6c:	e033      	b.n	8002bd6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d19e      	bne.n	8002ab6 <HAL_SPI_TransmitReceive+0x22c>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d199      	bne.n	8002ab6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f90a 	bl	8002da0 <SPI_EndRxTxTransaction>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d006      	beq.n	8002ba0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002b9e:	e01a      	b.n	8002bd6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10a      	bne.n	8002bbe <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bcc:	e003      	b.n	8002bd6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bde:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3730      	adds	r7, #48	; 0x30
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bfc:	f7fe fca8 	bl	8001550 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	4413      	add	r3, r2
 8002c0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c0c:	f7fe fca0 	bl	8001550 <HAL_GetTick>
 8002c10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c12:	4b39      	ldr	r3, [pc, #228]	; (8002cf8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	015b      	lsls	r3, r3, #5
 8002c18:	0d1b      	lsrs	r3, r3, #20
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	fb02 f303 	mul.w	r3, r2, r3
 8002c20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c22:	e054      	b.n	8002cce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2a:	d050      	beq.n	8002cce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c2c:	f7fe fc90 	bl	8001550 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	69fa      	ldr	r2, [r7, #28]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d902      	bls.n	8002c42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d13d      	bne.n	8002cbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c5a:	d111      	bne.n	8002c80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c64:	d004      	beq.n	8002c70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6e:	d107      	bne.n	8002c80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c88:	d10f      	bne.n	8002caa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ca8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e017      	b.n	8002cee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	bf0c      	ite	eq
 8002cde:	2301      	moveq	r3, #1
 8002ce0:	2300      	movne	r3, #0
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d19b      	bne.n	8002c24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000000 	.word	0x20000000

08002cfc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d10:	d111      	bne.n	8002d36 <SPI_EndRxTransaction+0x3a>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d1a:	d004      	beq.n	8002d26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d24:	d107      	bne.n	8002d36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d34:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d3e:	d117      	bne.n	8002d70 <SPI_EndRxTransaction+0x74>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d48:	d112      	bne.n	8002d70 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2200      	movs	r2, #0
 8002d52:	2101      	movs	r1, #1
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f7ff ff49 	bl	8002bec <SPI_WaitFlagStateUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d01a      	beq.n	8002d96 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e013      	b.n	8002d98 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2200      	movs	r2, #0
 8002d78:	2180      	movs	r1, #128	; 0x80
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f7ff ff36 	bl	8002bec <SPI_WaitFlagStateUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8a:	f043 0220 	orr.w	r2, r3, #32
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e000      	b.n	8002d98 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2200      	movs	r2, #0
 8002db4:	2180      	movs	r1, #128	; 0x80
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f7ff ff18 	bl	8002bec <SPI_WaitFlagStateUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d007      	beq.n	8002dd2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	f043 0220 	orr.w	r2, r3, #32
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e000      	b.n	8002dd4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e042      	b.n	8002e74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fe fa78 	bl	80012f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2224      	movs	r2, #36	; 0x24
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f91d 	bl	8003060 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	; 0x28
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d16d      	bne.n	8002f78 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <HAL_UART_Transmit+0x2c>
 8002ea2:	88fb      	ldrh	r3, [r7, #6]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e066      	b.n	8002f7a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2221      	movs	r2, #33	; 0x21
 8002eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eba:	f7fe fb49 	bl	8001550 <HAL_GetTick>
 8002ebe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	88fa      	ldrh	r2, [r7, #6]
 8002ec4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	88fa      	ldrh	r2, [r7, #6]
 8002eca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed4:	d108      	bne.n	8002ee8 <HAL_UART_Transmit+0x6c>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d104      	bne.n	8002ee8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	e003      	b.n	8002ef0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ef0:	e02a      	b.n	8002f48 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2180      	movs	r1, #128	; 0x80
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 f840 	bl	8002f82 <UART_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e036      	b.n	8002f7a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10b      	bne.n	8002f2a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	3302      	adds	r3, #2
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	e007      	b.n	8002f3a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	781a      	ldrb	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	3301      	adds	r3, #1
 8002f38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1cf      	bne.n	8002ef2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2140      	movs	r1, #64	; 0x40
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 f810 	bl	8002f82 <UART_WaitOnFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e006      	b.n	8002f7a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e000      	b.n	8002f7a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f78:	2302      	movs	r3, #2
  }
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3720      	adds	r7, #32
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b090      	sub	sp, #64	; 0x40
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	603b      	str	r3, [r7, #0]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f92:	e050      	b.n	8003036 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9a:	d04c      	beq.n	8003036 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d007      	beq.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fa2:	f7fe fad5 	bl	8001550 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d241      	bcs.n	8003036 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	330c      	adds	r3, #12
 8002fb8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbc:	e853 3f00 	ldrex	r3, [r3]
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	330c      	adds	r3, #12
 8002fd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fd2:	637a      	str	r2, [r7, #52]	; 0x34
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fda:	e841 2300 	strex	r3, r2, [r1]
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1e5      	bne.n	8002fb2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3314      	adds	r3, #20
 8002fec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	e853 3f00 	ldrex	r3, [r3]
 8002ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f023 0301 	bic.w	r3, r3, #1
 8002ffc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3314      	adds	r3, #20
 8003004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003006:	623a      	str	r2, [r7, #32]
 8003008:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300a:	69f9      	ldr	r1, [r7, #28]
 800300c:	6a3a      	ldr	r2, [r7, #32]
 800300e:	e841 2300 	strex	r3, r2, [r1]
 8003012:	61bb      	str	r3, [r7, #24]
   return(result);
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1e5      	bne.n	8002fe6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e00f      	b.n	8003056 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4013      	ands	r3, r2
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	429a      	cmp	r2, r3
 8003044:	bf0c      	ite	eq
 8003046:	2301      	moveq	r3, #1
 8003048:	2300      	movne	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	429a      	cmp	r2, r3
 8003052:	d09f      	beq.n	8002f94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3740      	adds	r7, #64	; 0x40
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800309a:	f023 030c 	bic.w	r3, r3, #12
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	430b      	orrs	r3, r1
 80030a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699a      	ldr	r2, [r3, #24]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a2c      	ldr	r2, [pc, #176]	; (8003174 <UART_SetConfig+0x114>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d103      	bne.n	80030d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030c8:	f7ff f8ce 	bl	8002268 <HAL_RCC_GetPCLK2Freq>
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	e002      	b.n	80030d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030d0:	f7ff f8b6 	bl	8002240 <HAL_RCC_GetPCLK1Freq>
 80030d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	009a      	lsls	r2, r3, #2
 80030e0:	441a      	add	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ec:	4a22      	ldr	r2, [pc, #136]	; (8003178 <UART_SetConfig+0x118>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	0119      	lsls	r1, r3, #4
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	009a      	lsls	r2, r3, #2
 8003100:	441a      	add	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	fbb2 f2f3 	udiv	r2, r2, r3
 800310c:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <UART_SetConfig+0x118>)
 800310e:	fba3 0302 	umull	r0, r3, r3, r2
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	2064      	movs	r0, #100	; 0x64
 8003116:	fb00 f303 	mul.w	r3, r0, r3
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	3332      	adds	r3, #50	; 0x32
 8003120:	4a15      	ldr	r2, [pc, #84]	; (8003178 <UART_SetConfig+0x118>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800312c:	4419      	add	r1, r3
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	009a      	lsls	r2, r3, #2
 8003138:	441a      	add	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	fbb2 f2f3 	udiv	r2, r2, r3
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <UART_SetConfig+0x118>)
 8003146:	fba3 0302 	umull	r0, r3, r3, r2
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	2064      	movs	r0, #100	; 0x64
 800314e:	fb00 f303 	mul.w	r3, r0, r3
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	3332      	adds	r3, #50	; 0x32
 8003158:	4a07      	ldr	r2, [pc, #28]	; (8003178 <UART_SetConfig+0x118>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	f003 020f 	and.w	r2, r3, #15
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	440a      	add	r2, r1
 800316a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40013800 	.word	0x40013800
 8003178:	51eb851f 	.word	0x51eb851f

0800317c <__errno>:
 800317c:	4b01      	ldr	r3, [pc, #4]	; (8003184 <__errno+0x8>)
 800317e:	6818      	ldr	r0, [r3, #0]
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	2000000c 	.word	0x2000000c

08003188 <__libc_init_array>:
 8003188:	b570      	push	{r4, r5, r6, lr}
 800318a:	2600      	movs	r6, #0
 800318c:	4d0c      	ldr	r5, [pc, #48]	; (80031c0 <__libc_init_array+0x38>)
 800318e:	4c0d      	ldr	r4, [pc, #52]	; (80031c4 <__libc_init_array+0x3c>)
 8003190:	1b64      	subs	r4, r4, r5
 8003192:	10a4      	asrs	r4, r4, #2
 8003194:	42a6      	cmp	r6, r4
 8003196:	d109      	bne.n	80031ac <__libc_init_array+0x24>
 8003198:	f000 fc9c 	bl	8003ad4 <_init>
 800319c:	2600      	movs	r6, #0
 800319e:	4d0a      	ldr	r5, [pc, #40]	; (80031c8 <__libc_init_array+0x40>)
 80031a0:	4c0a      	ldr	r4, [pc, #40]	; (80031cc <__libc_init_array+0x44>)
 80031a2:	1b64      	subs	r4, r4, r5
 80031a4:	10a4      	asrs	r4, r4, #2
 80031a6:	42a6      	cmp	r6, r4
 80031a8:	d105      	bne.n	80031b6 <__libc_init_array+0x2e>
 80031aa:	bd70      	pop	{r4, r5, r6, pc}
 80031ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80031b0:	4798      	blx	r3
 80031b2:	3601      	adds	r6, #1
 80031b4:	e7ee      	b.n	8003194 <__libc_init_array+0xc>
 80031b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ba:	4798      	blx	r3
 80031bc:	3601      	adds	r6, #1
 80031be:	e7f2      	b.n	80031a6 <__libc_init_array+0x1e>
 80031c0:	08004090 	.word	0x08004090
 80031c4:	08004090 	.word	0x08004090
 80031c8:	08004090 	.word	0x08004090
 80031cc:	08004094 	.word	0x08004094

080031d0 <memcpy>:
 80031d0:	440a      	add	r2, r1
 80031d2:	4291      	cmp	r1, r2
 80031d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80031d8:	d100      	bne.n	80031dc <memcpy+0xc>
 80031da:	4770      	bx	lr
 80031dc:	b510      	push	{r4, lr}
 80031de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031e2:	4291      	cmp	r1, r2
 80031e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031e8:	d1f9      	bne.n	80031de <memcpy+0xe>
 80031ea:	bd10      	pop	{r4, pc}

080031ec <memset>:
 80031ec:	4603      	mov	r3, r0
 80031ee:	4402      	add	r2, r0
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d100      	bne.n	80031f6 <memset+0xa>
 80031f4:	4770      	bx	lr
 80031f6:	f803 1b01 	strb.w	r1, [r3], #1
 80031fa:	e7f9      	b.n	80031f0 <memset+0x4>

080031fc <siprintf>:
 80031fc:	b40e      	push	{r1, r2, r3}
 80031fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003202:	b500      	push	{lr}
 8003204:	b09c      	sub	sp, #112	; 0x70
 8003206:	ab1d      	add	r3, sp, #116	; 0x74
 8003208:	9002      	str	r0, [sp, #8]
 800320a:	9006      	str	r0, [sp, #24]
 800320c:	9107      	str	r1, [sp, #28]
 800320e:	9104      	str	r1, [sp, #16]
 8003210:	4808      	ldr	r0, [pc, #32]	; (8003234 <siprintf+0x38>)
 8003212:	4909      	ldr	r1, [pc, #36]	; (8003238 <siprintf+0x3c>)
 8003214:	f853 2b04 	ldr.w	r2, [r3], #4
 8003218:	9105      	str	r1, [sp, #20]
 800321a:	6800      	ldr	r0, [r0, #0]
 800321c:	a902      	add	r1, sp, #8
 800321e:	9301      	str	r3, [sp, #4]
 8003220:	f000 f868 	bl	80032f4 <_svfiprintf_r>
 8003224:	2200      	movs	r2, #0
 8003226:	9b02      	ldr	r3, [sp, #8]
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	b01c      	add	sp, #112	; 0x70
 800322c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003230:	b003      	add	sp, #12
 8003232:	4770      	bx	lr
 8003234:	2000000c 	.word	0x2000000c
 8003238:	ffff0208 	.word	0xffff0208

0800323c <__ssputs_r>:
 800323c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003240:	688e      	ldr	r6, [r1, #8]
 8003242:	4682      	mov	sl, r0
 8003244:	429e      	cmp	r6, r3
 8003246:	460c      	mov	r4, r1
 8003248:	4690      	mov	r8, r2
 800324a:	461f      	mov	r7, r3
 800324c:	d838      	bhi.n	80032c0 <__ssputs_r+0x84>
 800324e:	898a      	ldrh	r2, [r1, #12]
 8003250:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003254:	d032      	beq.n	80032bc <__ssputs_r+0x80>
 8003256:	6825      	ldr	r5, [r4, #0]
 8003258:	6909      	ldr	r1, [r1, #16]
 800325a:	3301      	adds	r3, #1
 800325c:	eba5 0901 	sub.w	r9, r5, r1
 8003260:	6965      	ldr	r5, [r4, #20]
 8003262:	444b      	add	r3, r9
 8003264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003268:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800326c:	106d      	asrs	r5, r5, #1
 800326e:	429d      	cmp	r5, r3
 8003270:	bf38      	it	cc
 8003272:	461d      	movcc	r5, r3
 8003274:	0553      	lsls	r3, r2, #21
 8003276:	d531      	bpl.n	80032dc <__ssputs_r+0xa0>
 8003278:	4629      	mov	r1, r5
 800327a:	f000 fb61 	bl	8003940 <_malloc_r>
 800327e:	4606      	mov	r6, r0
 8003280:	b950      	cbnz	r0, 8003298 <__ssputs_r+0x5c>
 8003282:	230c      	movs	r3, #12
 8003284:	f04f 30ff 	mov.w	r0, #4294967295
 8003288:	f8ca 3000 	str.w	r3, [sl]
 800328c:	89a3      	ldrh	r3, [r4, #12]
 800328e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003292:	81a3      	strh	r3, [r4, #12]
 8003294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003298:	464a      	mov	r2, r9
 800329a:	6921      	ldr	r1, [r4, #16]
 800329c:	f7ff ff98 	bl	80031d0 <memcpy>
 80032a0:	89a3      	ldrh	r3, [r4, #12]
 80032a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032aa:	81a3      	strh	r3, [r4, #12]
 80032ac:	6126      	str	r6, [r4, #16]
 80032ae:	444e      	add	r6, r9
 80032b0:	6026      	str	r6, [r4, #0]
 80032b2:	463e      	mov	r6, r7
 80032b4:	6165      	str	r5, [r4, #20]
 80032b6:	eba5 0509 	sub.w	r5, r5, r9
 80032ba:	60a5      	str	r5, [r4, #8]
 80032bc:	42be      	cmp	r6, r7
 80032be:	d900      	bls.n	80032c2 <__ssputs_r+0x86>
 80032c0:	463e      	mov	r6, r7
 80032c2:	4632      	mov	r2, r6
 80032c4:	4641      	mov	r1, r8
 80032c6:	6820      	ldr	r0, [r4, #0]
 80032c8:	f000 fab8 	bl	800383c <memmove>
 80032cc:	68a3      	ldr	r3, [r4, #8]
 80032ce:	2000      	movs	r0, #0
 80032d0:	1b9b      	subs	r3, r3, r6
 80032d2:	60a3      	str	r3, [r4, #8]
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	4433      	add	r3, r6
 80032d8:	6023      	str	r3, [r4, #0]
 80032da:	e7db      	b.n	8003294 <__ssputs_r+0x58>
 80032dc:	462a      	mov	r2, r5
 80032de:	f000 fba3 	bl	8003a28 <_realloc_r>
 80032e2:	4606      	mov	r6, r0
 80032e4:	2800      	cmp	r0, #0
 80032e6:	d1e1      	bne.n	80032ac <__ssputs_r+0x70>
 80032e8:	4650      	mov	r0, sl
 80032ea:	6921      	ldr	r1, [r4, #16]
 80032ec:	f000 fac0 	bl	8003870 <_free_r>
 80032f0:	e7c7      	b.n	8003282 <__ssputs_r+0x46>
	...

080032f4 <_svfiprintf_r>:
 80032f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f8:	4698      	mov	r8, r3
 80032fa:	898b      	ldrh	r3, [r1, #12]
 80032fc:	4607      	mov	r7, r0
 80032fe:	061b      	lsls	r3, r3, #24
 8003300:	460d      	mov	r5, r1
 8003302:	4614      	mov	r4, r2
 8003304:	b09d      	sub	sp, #116	; 0x74
 8003306:	d50e      	bpl.n	8003326 <_svfiprintf_r+0x32>
 8003308:	690b      	ldr	r3, [r1, #16]
 800330a:	b963      	cbnz	r3, 8003326 <_svfiprintf_r+0x32>
 800330c:	2140      	movs	r1, #64	; 0x40
 800330e:	f000 fb17 	bl	8003940 <_malloc_r>
 8003312:	6028      	str	r0, [r5, #0]
 8003314:	6128      	str	r0, [r5, #16]
 8003316:	b920      	cbnz	r0, 8003322 <_svfiprintf_r+0x2e>
 8003318:	230c      	movs	r3, #12
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	e0d1      	b.n	80034c6 <_svfiprintf_r+0x1d2>
 8003322:	2340      	movs	r3, #64	; 0x40
 8003324:	616b      	str	r3, [r5, #20]
 8003326:	2300      	movs	r3, #0
 8003328:	9309      	str	r3, [sp, #36]	; 0x24
 800332a:	2320      	movs	r3, #32
 800332c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003330:	2330      	movs	r3, #48	; 0x30
 8003332:	f04f 0901 	mov.w	r9, #1
 8003336:	f8cd 800c 	str.w	r8, [sp, #12]
 800333a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80034e0 <_svfiprintf_r+0x1ec>
 800333e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003342:	4623      	mov	r3, r4
 8003344:	469a      	mov	sl, r3
 8003346:	f813 2b01 	ldrb.w	r2, [r3], #1
 800334a:	b10a      	cbz	r2, 8003350 <_svfiprintf_r+0x5c>
 800334c:	2a25      	cmp	r2, #37	; 0x25
 800334e:	d1f9      	bne.n	8003344 <_svfiprintf_r+0x50>
 8003350:	ebba 0b04 	subs.w	fp, sl, r4
 8003354:	d00b      	beq.n	800336e <_svfiprintf_r+0x7a>
 8003356:	465b      	mov	r3, fp
 8003358:	4622      	mov	r2, r4
 800335a:	4629      	mov	r1, r5
 800335c:	4638      	mov	r0, r7
 800335e:	f7ff ff6d 	bl	800323c <__ssputs_r>
 8003362:	3001      	adds	r0, #1
 8003364:	f000 80aa 	beq.w	80034bc <_svfiprintf_r+0x1c8>
 8003368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800336a:	445a      	add	r2, fp
 800336c:	9209      	str	r2, [sp, #36]	; 0x24
 800336e:	f89a 3000 	ldrb.w	r3, [sl]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80a2 	beq.w	80034bc <_svfiprintf_r+0x1c8>
 8003378:	2300      	movs	r3, #0
 800337a:	f04f 32ff 	mov.w	r2, #4294967295
 800337e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003382:	f10a 0a01 	add.w	sl, sl, #1
 8003386:	9304      	str	r3, [sp, #16]
 8003388:	9307      	str	r3, [sp, #28]
 800338a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800338e:	931a      	str	r3, [sp, #104]	; 0x68
 8003390:	4654      	mov	r4, sl
 8003392:	2205      	movs	r2, #5
 8003394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003398:	4851      	ldr	r0, [pc, #324]	; (80034e0 <_svfiprintf_r+0x1ec>)
 800339a:	f000 fa41 	bl	8003820 <memchr>
 800339e:	9a04      	ldr	r2, [sp, #16]
 80033a0:	b9d8      	cbnz	r0, 80033da <_svfiprintf_r+0xe6>
 80033a2:	06d0      	lsls	r0, r2, #27
 80033a4:	bf44      	itt	mi
 80033a6:	2320      	movmi	r3, #32
 80033a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033ac:	0711      	lsls	r1, r2, #28
 80033ae:	bf44      	itt	mi
 80033b0:	232b      	movmi	r3, #43	; 0x2b
 80033b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033b6:	f89a 3000 	ldrb.w	r3, [sl]
 80033ba:	2b2a      	cmp	r3, #42	; 0x2a
 80033bc:	d015      	beq.n	80033ea <_svfiprintf_r+0xf6>
 80033be:	4654      	mov	r4, sl
 80033c0:	2000      	movs	r0, #0
 80033c2:	f04f 0c0a 	mov.w	ip, #10
 80033c6:	9a07      	ldr	r2, [sp, #28]
 80033c8:	4621      	mov	r1, r4
 80033ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033ce:	3b30      	subs	r3, #48	; 0x30
 80033d0:	2b09      	cmp	r3, #9
 80033d2:	d94e      	bls.n	8003472 <_svfiprintf_r+0x17e>
 80033d4:	b1b0      	cbz	r0, 8003404 <_svfiprintf_r+0x110>
 80033d6:	9207      	str	r2, [sp, #28]
 80033d8:	e014      	b.n	8003404 <_svfiprintf_r+0x110>
 80033da:	eba0 0308 	sub.w	r3, r0, r8
 80033de:	fa09 f303 	lsl.w	r3, r9, r3
 80033e2:	4313      	orrs	r3, r2
 80033e4:	46a2      	mov	sl, r4
 80033e6:	9304      	str	r3, [sp, #16]
 80033e8:	e7d2      	b.n	8003390 <_svfiprintf_r+0x9c>
 80033ea:	9b03      	ldr	r3, [sp, #12]
 80033ec:	1d19      	adds	r1, r3, #4
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	9103      	str	r1, [sp, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bfbb      	ittet	lt
 80033f6:	425b      	neglt	r3, r3
 80033f8:	f042 0202 	orrlt.w	r2, r2, #2
 80033fc:	9307      	strge	r3, [sp, #28]
 80033fe:	9307      	strlt	r3, [sp, #28]
 8003400:	bfb8      	it	lt
 8003402:	9204      	strlt	r2, [sp, #16]
 8003404:	7823      	ldrb	r3, [r4, #0]
 8003406:	2b2e      	cmp	r3, #46	; 0x2e
 8003408:	d10c      	bne.n	8003424 <_svfiprintf_r+0x130>
 800340a:	7863      	ldrb	r3, [r4, #1]
 800340c:	2b2a      	cmp	r3, #42	; 0x2a
 800340e:	d135      	bne.n	800347c <_svfiprintf_r+0x188>
 8003410:	9b03      	ldr	r3, [sp, #12]
 8003412:	3402      	adds	r4, #2
 8003414:	1d1a      	adds	r2, r3, #4
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	9203      	str	r2, [sp, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	bfb8      	it	lt
 800341e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003422:	9305      	str	r3, [sp, #20]
 8003424:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80034e4 <_svfiprintf_r+0x1f0>
 8003428:	2203      	movs	r2, #3
 800342a:	4650      	mov	r0, sl
 800342c:	7821      	ldrb	r1, [r4, #0]
 800342e:	f000 f9f7 	bl	8003820 <memchr>
 8003432:	b140      	cbz	r0, 8003446 <_svfiprintf_r+0x152>
 8003434:	2340      	movs	r3, #64	; 0x40
 8003436:	eba0 000a 	sub.w	r0, r0, sl
 800343a:	fa03 f000 	lsl.w	r0, r3, r0
 800343e:	9b04      	ldr	r3, [sp, #16]
 8003440:	3401      	adds	r4, #1
 8003442:	4303      	orrs	r3, r0
 8003444:	9304      	str	r3, [sp, #16]
 8003446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800344a:	2206      	movs	r2, #6
 800344c:	4826      	ldr	r0, [pc, #152]	; (80034e8 <_svfiprintf_r+0x1f4>)
 800344e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003452:	f000 f9e5 	bl	8003820 <memchr>
 8003456:	2800      	cmp	r0, #0
 8003458:	d038      	beq.n	80034cc <_svfiprintf_r+0x1d8>
 800345a:	4b24      	ldr	r3, [pc, #144]	; (80034ec <_svfiprintf_r+0x1f8>)
 800345c:	bb1b      	cbnz	r3, 80034a6 <_svfiprintf_r+0x1b2>
 800345e:	9b03      	ldr	r3, [sp, #12]
 8003460:	3307      	adds	r3, #7
 8003462:	f023 0307 	bic.w	r3, r3, #7
 8003466:	3308      	adds	r3, #8
 8003468:	9303      	str	r3, [sp, #12]
 800346a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800346c:	4433      	add	r3, r6
 800346e:	9309      	str	r3, [sp, #36]	; 0x24
 8003470:	e767      	b.n	8003342 <_svfiprintf_r+0x4e>
 8003472:	460c      	mov	r4, r1
 8003474:	2001      	movs	r0, #1
 8003476:	fb0c 3202 	mla	r2, ip, r2, r3
 800347a:	e7a5      	b.n	80033c8 <_svfiprintf_r+0xd4>
 800347c:	2300      	movs	r3, #0
 800347e:	f04f 0c0a 	mov.w	ip, #10
 8003482:	4619      	mov	r1, r3
 8003484:	3401      	adds	r4, #1
 8003486:	9305      	str	r3, [sp, #20]
 8003488:	4620      	mov	r0, r4
 800348a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800348e:	3a30      	subs	r2, #48	; 0x30
 8003490:	2a09      	cmp	r2, #9
 8003492:	d903      	bls.n	800349c <_svfiprintf_r+0x1a8>
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0c5      	beq.n	8003424 <_svfiprintf_r+0x130>
 8003498:	9105      	str	r1, [sp, #20]
 800349a:	e7c3      	b.n	8003424 <_svfiprintf_r+0x130>
 800349c:	4604      	mov	r4, r0
 800349e:	2301      	movs	r3, #1
 80034a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80034a4:	e7f0      	b.n	8003488 <_svfiprintf_r+0x194>
 80034a6:	ab03      	add	r3, sp, #12
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	462a      	mov	r2, r5
 80034ac:	4638      	mov	r0, r7
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <_svfiprintf_r+0x1fc>)
 80034b0:	a904      	add	r1, sp, #16
 80034b2:	f3af 8000 	nop.w
 80034b6:	1c42      	adds	r2, r0, #1
 80034b8:	4606      	mov	r6, r0
 80034ba:	d1d6      	bne.n	800346a <_svfiprintf_r+0x176>
 80034bc:	89ab      	ldrh	r3, [r5, #12]
 80034be:	065b      	lsls	r3, r3, #25
 80034c0:	f53f af2c 	bmi.w	800331c <_svfiprintf_r+0x28>
 80034c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034c6:	b01d      	add	sp, #116	; 0x74
 80034c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034cc:	ab03      	add	r3, sp, #12
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	462a      	mov	r2, r5
 80034d2:	4638      	mov	r0, r7
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <_svfiprintf_r+0x1fc>)
 80034d6:	a904      	add	r1, sp, #16
 80034d8:	f000 f87c 	bl	80035d4 <_printf_i>
 80034dc:	e7eb      	b.n	80034b6 <_svfiprintf_r+0x1c2>
 80034de:	bf00      	nop
 80034e0:	0800405a 	.word	0x0800405a
 80034e4:	08004060 	.word	0x08004060
 80034e8:	08004064 	.word	0x08004064
 80034ec:	00000000 	.word	0x00000000
 80034f0:	0800323d 	.word	0x0800323d

080034f4 <_printf_common>:
 80034f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034f8:	4616      	mov	r6, r2
 80034fa:	4699      	mov	r9, r3
 80034fc:	688a      	ldr	r2, [r1, #8]
 80034fe:	690b      	ldr	r3, [r1, #16]
 8003500:	4607      	mov	r7, r0
 8003502:	4293      	cmp	r3, r2
 8003504:	bfb8      	it	lt
 8003506:	4613      	movlt	r3, r2
 8003508:	6033      	str	r3, [r6, #0]
 800350a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800350e:	460c      	mov	r4, r1
 8003510:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003514:	b10a      	cbz	r2, 800351a <_printf_common+0x26>
 8003516:	3301      	adds	r3, #1
 8003518:	6033      	str	r3, [r6, #0]
 800351a:	6823      	ldr	r3, [r4, #0]
 800351c:	0699      	lsls	r1, r3, #26
 800351e:	bf42      	ittt	mi
 8003520:	6833      	ldrmi	r3, [r6, #0]
 8003522:	3302      	addmi	r3, #2
 8003524:	6033      	strmi	r3, [r6, #0]
 8003526:	6825      	ldr	r5, [r4, #0]
 8003528:	f015 0506 	ands.w	r5, r5, #6
 800352c:	d106      	bne.n	800353c <_printf_common+0x48>
 800352e:	f104 0a19 	add.w	sl, r4, #25
 8003532:	68e3      	ldr	r3, [r4, #12]
 8003534:	6832      	ldr	r2, [r6, #0]
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	42ab      	cmp	r3, r5
 800353a:	dc28      	bgt.n	800358e <_printf_common+0x9a>
 800353c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003540:	1e13      	subs	r3, r2, #0
 8003542:	6822      	ldr	r2, [r4, #0]
 8003544:	bf18      	it	ne
 8003546:	2301      	movne	r3, #1
 8003548:	0692      	lsls	r2, r2, #26
 800354a:	d42d      	bmi.n	80035a8 <_printf_common+0xb4>
 800354c:	4649      	mov	r1, r9
 800354e:	4638      	mov	r0, r7
 8003550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003554:	47c0      	blx	r8
 8003556:	3001      	adds	r0, #1
 8003558:	d020      	beq.n	800359c <_printf_common+0xa8>
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	68e5      	ldr	r5, [r4, #12]
 800355e:	f003 0306 	and.w	r3, r3, #6
 8003562:	2b04      	cmp	r3, #4
 8003564:	bf18      	it	ne
 8003566:	2500      	movne	r5, #0
 8003568:	6832      	ldr	r2, [r6, #0]
 800356a:	f04f 0600 	mov.w	r6, #0
 800356e:	68a3      	ldr	r3, [r4, #8]
 8003570:	bf08      	it	eq
 8003572:	1aad      	subeq	r5, r5, r2
 8003574:	6922      	ldr	r2, [r4, #16]
 8003576:	bf08      	it	eq
 8003578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800357c:	4293      	cmp	r3, r2
 800357e:	bfc4      	itt	gt
 8003580:	1a9b      	subgt	r3, r3, r2
 8003582:	18ed      	addgt	r5, r5, r3
 8003584:	341a      	adds	r4, #26
 8003586:	42b5      	cmp	r5, r6
 8003588:	d11a      	bne.n	80035c0 <_printf_common+0xcc>
 800358a:	2000      	movs	r0, #0
 800358c:	e008      	b.n	80035a0 <_printf_common+0xac>
 800358e:	2301      	movs	r3, #1
 8003590:	4652      	mov	r2, sl
 8003592:	4649      	mov	r1, r9
 8003594:	4638      	mov	r0, r7
 8003596:	47c0      	blx	r8
 8003598:	3001      	adds	r0, #1
 800359a:	d103      	bne.n	80035a4 <_printf_common+0xb0>
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a4:	3501      	adds	r5, #1
 80035a6:	e7c4      	b.n	8003532 <_printf_common+0x3e>
 80035a8:	2030      	movs	r0, #48	; 0x30
 80035aa:	18e1      	adds	r1, r4, r3
 80035ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035b6:	4422      	add	r2, r4
 80035b8:	3302      	adds	r3, #2
 80035ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035be:	e7c5      	b.n	800354c <_printf_common+0x58>
 80035c0:	2301      	movs	r3, #1
 80035c2:	4622      	mov	r2, r4
 80035c4:	4649      	mov	r1, r9
 80035c6:	4638      	mov	r0, r7
 80035c8:	47c0      	blx	r8
 80035ca:	3001      	adds	r0, #1
 80035cc:	d0e6      	beq.n	800359c <_printf_common+0xa8>
 80035ce:	3601      	adds	r6, #1
 80035d0:	e7d9      	b.n	8003586 <_printf_common+0x92>
	...

080035d4 <_printf_i>:
 80035d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035d8:	7e0f      	ldrb	r7, [r1, #24]
 80035da:	4691      	mov	r9, r2
 80035dc:	2f78      	cmp	r7, #120	; 0x78
 80035de:	4680      	mov	r8, r0
 80035e0:	460c      	mov	r4, r1
 80035e2:	469a      	mov	sl, r3
 80035e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80035e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80035ea:	d807      	bhi.n	80035fc <_printf_i+0x28>
 80035ec:	2f62      	cmp	r7, #98	; 0x62
 80035ee:	d80a      	bhi.n	8003606 <_printf_i+0x32>
 80035f0:	2f00      	cmp	r7, #0
 80035f2:	f000 80d9 	beq.w	80037a8 <_printf_i+0x1d4>
 80035f6:	2f58      	cmp	r7, #88	; 0x58
 80035f8:	f000 80a4 	beq.w	8003744 <_printf_i+0x170>
 80035fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003604:	e03a      	b.n	800367c <_printf_i+0xa8>
 8003606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800360a:	2b15      	cmp	r3, #21
 800360c:	d8f6      	bhi.n	80035fc <_printf_i+0x28>
 800360e:	a101      	add	r1, pc, #4	; (adr r1, 8003614 <_printf_i+0x40>)
 8003610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003614:	0800366d 	.word	0x0800366d
 8003618:	08003681 	.word	0x08003681
 800361c:	080035fd 	.word	0x080035fd
 8003620:	080035fd 	.word	0x080035fd
 8003624:	080035fd 	.word	0x080035fd
 8003628:	080035fd 	.word	0x080035fd
 800362c:	08003681 	.word	0x08003681
 8003630:	080035fd 	.word	0x080035fd
 8003634:	080035fd 	.word	0x080035fd
 8003638:	080035fd 	.word	0x080035fd
 800363c:	080035fd 	.word	0x080035fd
 8003640:	0800378f 	.word	0x0800378f
 8003644:	080036b1 	.word	0x080036b1
 8003648:	08003771 	.word	0x08003771
 800364c:	080035fd 	.word	0x080035fd
 8003650:	080035fd 	.word	0x080035fd
 8003654:	080037b1 	.word	0x080037b1
 8003658:	080035fd 	.word	0x080035fd
 800365c:	080036b1 	.word	0x080036b1
 8003660:	080035fd 	.word	0x080035fd
 8003664:	080035fd 	.word	0x080035fd
 8003668:	08003779 	.word	0x08003779
 800366c:	682b      	ldr	r3, [r5, #0]
 800366e:	1d1a      	adds	r2, r3, #4
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	602a      	str	r2, [r5, #0]
 8003674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800367c:	2301      	movs	r3, #1
 800367e:	e0a4      	b.n	80037ca <_printf_i+0x1f6>
 8003680:	6820      	ldr	r0, [r4, #0]
 8003682:	6829      	ldr	r1, [r5, #0]
 8003684:	0606      	lsls	r6, r0, #24
 8003686:	f101 0304 	add.w	r3, r1, #4
 800368a:	d50a      	bpl.n	80036a2 <_printf_i+0xce>
 800368c:	680e      	ldr	r6, [r1, #0]
 800368e:	602b      	str	r3, [r5, #0]
 8003690:	2e00      	cmp	r6, #0
 8003692:	da03      	bge.n	800369c <_printf_i+0xc8>
 8003694:	232d      	movs	r3, #45	; 0x2d
 8003696:	4276      	negs	r6, r6
 8003698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800369c:	230a      	movs	r3, #10
 800369e:	485e      	ldr	r0, [pc, #376]	; (8003818 <_printf_i+0x244>)
 80036a0:	e019      	b.n	80036d6 <_printf_i+0x102>
 80036a2:	680e      	ldr	r6, [r1, #0]
 80036a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036a8:	602b      	str	r3, [r5, #0]
 80036aa:	bf18      	it	ne
 80036ac:	b236      	sxthne	r6, r6
 80036ae:	e7ef      	b.n	8003690 <_printf_i+0xbc>
 80036b0:	682b      	ldr	r3, [r5, #0]
 80036b2:	6820      	ldr	r0, [r4, #0]
 80036b4:	1d19      	adds	r1, r3, #4
 80036b6:	6029      	str	r1, [r5, #0]
 80036b8:	0601      	lsls	r1, r0, #24
 80036ba:	d501      	bpl.n	80036c0 <_printf_i+0xec>
 80036bc:	681e      	ldr	r6, [r3, #0]
 80036be:	e002      	b.n	80036c6 <_printf_i+0xf2>
 80036c0:	0646      	lsls	r6, r0, #25
 80036c2:	d5fb      	bpl.n	80036bc <_printf_i+0xe8>
 80036c4:	881e      	ldrh	r6, [r3, #0]
 80036c6:	2f6f      	cmp	r7, #111	; 0x6f
 80036c8:	bf0c      	ite	eq
 80036ca:	2308      	moveq	r3, #8
 80036cc:	230a      	movne	r3, #10
 80036ce:	4852      	ldr	r0, [pc, #328]	; (8003818 <_printf_i+0x244>)
 80036d0:	2100      	movs	r1, #0
 80036d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036d6:	6865      	ldr	r5, [r4, #4]
 80036d8:	2d00      	cmp	r5, #0
 80036da:	bfa8      	it	ge
 80036dc:	6821      	ldrge	r1, [r4, #0]
 80036de:	60a5      	str	r5, [r4, #8]
 80036e0:	bfa4      	itt	ge
 80036e2:	f021 0104 	bicge.w	r1, r1, #4
 80036e6:	6021      	strge	r1, [r4, #0]
 80036e8:	b90e      	cbnz	r6, 80036ee <_printf_i+0x11a>
 80036ea:	2d00      	cmp	r5, #0
 80036ec:	d04d      	beq.n	800378a <_printf_i+0x1b6>
 80036ee:	4615      	mov	r5, r2
 80036f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80036f4:	fb03 6711 	mls	r7, r3, r1, r6
 80036f8:	5dc7      	ldrb	r7, [r0, r7]
 80036fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80036fe:	4637      	mov	r7, r6
 8003700:	42bb      	cmp	r3, r7
 8003702:	460e      	mov	r6, r1
 8003704:	d9f4      	bls.n	80036f0 <_printf_i+0x11c>
 8003706:	2b08      	cmp	r3, #8
 8003708:	d10b      	bne.n	8003722 <_printf_i+0x14e>
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	07de      	lsls	r6, r3, #31
 800370e:	d508      	bpl.n	8003722 <_printf_i+0x14e>
 8003710:	6923      	ldr	r3, [r4, #16]
 8003712:	6861      	ldr	r1, [r4, #4]
 8003714:	4299      	cmp	r1, r3
 8003716:	bfde      	ittt	le
 8003718:	2330      	movle	r3, #48	; 0x30
 800371a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800371e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003722:	1b52      	subs	r2, r2, r5
 8003724:	6122      	str	r2, [r4, #16]
 8003726:	464b      	mov	r3, r9
 8003728:	4621      	mov	r1, r4
 800372a:	4640      	mov	r0, r8
 800372c:	f8cd a000 	str.w	sl, [sp]
 8003730:	aa03      	add	r2, sp, #12
 8003732:	f7ff fedf 	bl	80034f4 <_printf_common>
 8003736:	3001      	adds	r0, #1
 8003738:	d14c      	bne.n	80037d4 <_printf_i+0x200>
 800373a:	f04f 30ff 	mov.w	r0, #4294967295
 800373e:	b004      	add	sp, #16
 8003740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003744:	4834      	ldr	r0, [pc, #208]	; (8003818 <_printf_i+0x244>)
 8003746:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800374a:	6829      	ldr	r1, [r5, #0]
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003752:	6029      	str	r1, [r5, #0]
 8003754:	061d      	lsls	r5, r3, #24
 8003756:	d514      	bpl.n	8003782 <_printf_i+0x1ae>
 8003758:	07df      	lsls	r7, r3, #31
 800375a:	bf44      	itt	mi
 800375c:	f043 0320 	orrmi.w	r3, r3, #32
 8003760:	6023      	strmi	r3, [r4, #0]
 8003762:	b91e      	cbnz	r6, 800376c <_printf_i+0x198>
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	f023 0320 	bic.w	r3, r3, #32
 800376a:	6023      	str	r3, [r4, #0]
 800376c:	2310      	movs	r3, #16
 800376e:	e7af      	b.n	80036d0 <_printf_i+0xfc>
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	f043 0320 	orr.w	r3, r3, #32
 8003776:	6023      	str	r3, [r4, #0]
 8003778:	2378      	movs	r3, #120	; 0x78
 800377a:	4828      	ldr	r0, [pc, #160]	; (800381c <_printf_i+0x248>)
 800377c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003780:	e7e3      	b.n	800374a <_printf_i+0x176>
 8003782:	0659      	lsls	r1, r3, #25
 8003784:	bf48      	it	mi
 8003786:	b2b6      	uxthmi	r6, r6
 8003788:	e7e6      	b.n	8003758 <_printf_i+0x184>
 800378a:	4615      	mov	r5, r2
 800378c:	e7bb      	b.n	8003706 <_printf_i+0x132>
 800378e:	682b      	ldr	r3, [r5, #0]
 8003790:	6826      	ldr	r6, [r4, #0]
 8003792:	1d18      	adds	r0, r3, #4
 8003794:	6961      	ldr	r1, [r4, #20]
 8003796:	6028      	str	r0, [r5, #0]
 8003798:	0635      	lsls	r5, r6, #24
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	d501      	bpl.n	80037a2 <_printf_i+0x1ce>
 800379e:	6019      	str	r1, [r3, #0]
 80037a0:	e002      	b.n	80037a8 <_printf_i+0x1d4>
 80037a2:	0670      	lsls	r0, r6, #25
 80037a4:	d5fb      	bpl.n	800379e <_printf_i+0x1ca>
 80037a6:	8019      	strh	r1, [r3, #0]
 80037a8:	2300      	movs	r3, #0
 80037aa:	4615      	mov	r5, r2
 80037ac:	6123      	str	r3, [r4, #16]
 80037ae:	e7ba      	b.n	8003726 <_printf_i+0x152>
 80037b0:	682b      	ldr	r3, [r5, #0]
 80037b2:	2100      	movs	r1, #0
 80037b4:	1d1a      	adds	r2, r3, #4
 80037b6:	602a      	str	r2, [r5, #0]
 80037b8:	681d      	ldr	r5, [r3, #0]
 80037ba:	6862      	ldr	r2, [r4, #4]
 80037bc:	4628      	mov	r0, r5
 80037be:	f000 f82f 	bl	8003820 <memchr>
 80037c2:	b108      	cbz	r0, 80037c8 <_printf_i+0x1f4>
 80037c4:	1b40      	subs	r0, r0, r5
 80037c6:	6060      	str	r0, [r4, #4]
 80037c8:	6863      	ldr	r3, [r4, #4]
 80037ca:	6123      	str	r3, [r4, #16]
 80037cc:	2300      	movs	r3, #0
 80037ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037d2:	e7a8      	b.n	8003726 <_printf_i+0x152>
 80037d4:	462a      	mov	r2, r5
 80037d6:	4649      	mov	r1, r9
 80037d8:	4640      	mov	r0, r8
 80037da:	6923      	ldr	r3, [r4, #16]
 80037dc:	47d0      	blx	sl
 80037de:	3001      	adds	r0, #1
 80037e0:	d0ab      	beq.n	800373a <_printf_i+0x166>
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	079b      	lsls	r3, r3, #30
 80037e6:	d413      	bmi.n	8003810 <_printf_i+0x23c>
 80037e8:	68e0      	ldr	r0, [r4, #12]
 80037ea:	9b03      	ldr	r3, [sp, #12]
 80037ec:	4298      	cmp	r0, r3
 80037ee:	bfb8      	it	lt
 80037f0:	4618      	movlt	r0, r3
 80037f2:	e7a4      	b.n	800373e <_printf_i+0x16a>
 80037f4:	2301      	movs	r3, #1
 80037f6:	4632      	mov	r2, r6
 80037f8:	4649      	mov	r1, r9
 80037fa:	4640      	mov	r0, r8
 80037fc:	47d0      	blx	sl
 80037fe:	3001      	adds	r0, #1
 8003800:	d09b      	beq.n	800373a <_printf_i+0x166>
 8003802:	3501      	adds	r5, #1
 8003804:	68e3      	ldr	r3, [r4, #12]
 8003806:	9903      	ldr	r1, [sp, #12]
 8003808:	1a5b      	subs	r3, r3, r1
 800380a:	42ab      	cmp	r3, r5
 800380c:	dcf2      	bgt.n	80037f4 <_printf_i+0x220>
 800380e:	e7eb      	b.n	80037e8 <_printf_i+0x214>
 8003810:	2500      	movs	r5, #0
 8003812:	f104 0619 	add.w	r6, r4, #25
 8003816:	e7f5      	b.n	8003804 <_printf_i+0x230>
 8003818:	0800406b 	.word	0x0800406b
 800381c:	0800407c 	.word	0x0800407c

08003820 <memchr>:
 8003820:	4603      	mov	r3, r0
 8003822:	b510      	push	{r4, lr}
 8003824:	b2c9      	uxtb	r1, r1
 8003826:	4402      	add	r2, r0
 8003828:	4293      	cmp	r3, r2
 800382a:	4618      	mov	r0, r3
 800382c:	d101      	bne.n	8003832 <memchr+0x12>
 800382e:	2000      	movs	r0, #0
 8003830:	e003      	b.n	800383a <memchr+0x1a>
 8003832:	7804      	ldrb	r4, [r0, #0]
 8003834:	3301      	adds	r3, #1
 8003836:	428c      	cmp	r4, r1
 8003838:	d1f6      	bne.n	8003828 <memchr+0x8>
 800383a:	bd10      	pop	{r4, pc}

0800383c <memmove>:
 800383c:	4288      	cmp	r0, r1
 800383e:	b510      	push	{r4, lr}
 8003840:	eb01 0402 	add.w	r4, r1, r2
 8003844:	d902      	bls.n	800384c <memmove+0x10>
 8003846:	4284      	cmp	r4, r0
 8003848:	4623      	mov	r3, r4
 800384a:	d807      	bhi.n	800385c <memmove+0x20>
 800384c:	1e43      	subs	r3, r0, #1
 800384e:	42a1      	cmp	r1, r4
 8003850:	d008      	beq.n	8003864 <memmove+0x28>
 8003852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003856:	f803 2f01 	strb.w	r2, [r3, #1]!
 800385a:	e7f8      	b.n	800384e <memmove+0x12>
 800385c:	4601      	mov	r1, r0
 800385e:	4402      	add	r2, r0
 8003860:	428a      	cmp	r2, r1
 8003862:	d100      	bne.n	8003866 <memmove+0x2a>
 8003864:	bd10      	pop	{r4, pc}
 8003866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800386a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800386e:	e7f7      	b.n	8003860 <memmove+0x24>

08003870 <_free_r>:
 8003870:	b538      	push	{r3, r4, r5, lr}
 8003872:	4605      	mov	r5, r0
 8003874:	2900      	cmp	r1, #0
 8003876:	d040      	beq.n	80038fa <_free_r+0x8a>
 8003878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800387c:	1f0c      	subs	r4, r1, #4
 800387e:	2b00      	cmp	r3, #0
 8003880:	bfb8      	it	lt
 8003882:	18e4      	addlt	r4, r4, r3
 8003884:	f000 f910 	bl	8003aa8 <__malloc_lock>
 8003888:	4a1c      	ldr	r2, [pc, #112]	; (80038fc <_free_r+0x8c>)
 800388a:	6813      	ldr	r3, [r2, #0]
 800388c:	b933      	cbnz	r3, 800389c <_free_r+0x2c>
 800388e:	6063      	str	r3, [r4, #4]
 8003890:	6014      	str	r4, [r2, #0]
 8003892:	4628      	mov	r0, r5
 8003894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003898:	f000 b90c 	b.w	8003ab4 <__malloc_unlock>
 800389c:	42a3      	cmp	r3, r4
 800389e:	d908      	bls.n	80038b2 <_free_r+0x42>
 80038a0:	6820      	ldr	r0, [r4, #0]
 80038a2:	1821      	adds	r1, r4, r0
 80038a4:	428b      	cmp	r3, r1
 80038a6:	bf01      	itttt	eq
 80038a8:	6819      	ldreq	r1, [r3, #0]
 80038aa:	685b      	ldreq	r3, [r3, #4]
 80038ac:	1809      	addeq	r1, r1, r0
 80038ae:	6021      	streq	r1, [r4, #0]
 80038b0:	e7ed      	b.n	800388e <_free_r+0x1e>
 80038b2:	461a      	mov	r2, r3
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	b10b      	cbz	r3, 80038bc <_free_r+0x4c>
 80038b8:	42a3      	cmp	r3, r4
 80038ba:	d9fa      	bls.n	80038b2 <_free_r+0x42>
 80038bc:	6811      	ldr	r1, [r2, #0]
 80038be:	1850      	adds	r0, r2, r1
 80038c0:	42a0      	cmp	r0, r4
 80038c2:	d10b      	bne.n	80038dc <_free_r+0x6c>
 80038c4:	6820      	ldr	r0, [r4, #0]
 80038c6:	4401      	add	r1, r0
 80038c8:	1850      	adds	r0, r2, r1
 80038ca:	4283      	cmp	r3, r0
 80038cc:	6011      	str	r1, [r2, #0]
 80038ce:	d1e0      	bne.n	8003892 <_free_r+0x22>
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	4401      	add	r1, r0
 80038d6:	6011      	str	r1, [r2, #0]
 80038d8:	6053      	str	r3, [r2, #4]
 80038da:	e7da      	b.n	8003892 <_free_r+0x22>
 80038dc:	d902      	bls.n	80038e4 <_free_r+0x74>
 80038de:	230c      	movs	r3, #12
 80038e0:	602b      	str	r3, [r5, #0]
 80038e2:	e7d6      	b.n	8003892 <_free_r+0x22>
 80038e4:	6820      	ldr	r0, [r4, #0]
 80038e6:	1821      	adds	r1, r4, r0
 80038e8:	428b      	cmp	r3, r1
 80038ea:	bf01      	itttt	eq
 80038ec:	6819      	ldreq	r1, [r3, #0]
 80038ee:	685b      	ldreq	r3, [r3, #4]
 80038f0:	1809      	addeq	r1, r1, r0
 80038f2:	6021      	streq	r1, [r4, #0]
 80038f4:	6063      	str	r3, [r4, #4]
 80038f6:	6054      	str	r4, [r2, #4]
 80038f8:	e7cb      	b.n	8003892 <_free_r+0x22>
 80038fa:	bd38      	pop	{r3, r4, r5, pc}
 80038fc:	200001e0 	.word	0x200001e0

08003900 <sbrk_aligned>:
 8003900:	b570      	push	{r4, r5, r6, lr}
 8003902:	4e0e      	ldr	r6, [pc, #56]	; (800393c <sbrk_aligned+0x3c>)
 8003904:	460c      	mov	r4, r1
 8003906:	6831      	ldr	r1, [r6, #0]
 8003908:	4605      	mov	r5, r0
 800390a:	b911      	cbnz	r1, 8003912 <sbrk_aligned+0x12>
 800390c:	f000 f8bc 	bl	8003a88 <_sbrk_r>
 8003910:	6030      	str	r0, [r6, #0]
 8003912:	4621      	mov	r1, r4
 8003914:	4628      	mov	r0, r5
 8003916:	f000 f8b7 	bl	8003a88 <_sbrk_r>
 800391a:	1c43      	adds	r3, r0, #1
 800391c:	d00a      	beq.n	8003934 <sbrk_aligned+0x34>
 800391e:	1cc4      	adds	r4, r0, #3
 8003920:	f024 0403 	bic.w	r4, r4, #3
 8003924:	42a0      	cmp	r0, r4
 8003926:	d007      	beq.n	8003938 <sbrk_aligned+0x38>
 8003928:	1a21      	subs	r1, r4, r0
 800392a:	4628      	mov	r0, r5
 800392c:	f000 f8ac 	bl	8003a88 <_sbrk_r>
 8003930:	3001      	adds	r0, #1
 8003932:	d101      	bne.n	8003938 <sbrk_aligned+0x38>
 8003934:	f04f 34ff 	mov.w	r4, #4294967295
 8003938:	4620      	mov	r0, r4
 800393a:	bd70      	pop	{r4, r5, r6, pc}
 800393c:	200001e4 	.word	0x200001e4

08003940 <_malloc_r>:
 8003940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003944:	1ccd      	adds	r5, r1, #3
 8003946:	f025 0503 	bic.w	r5, r5, #3
 800394a:	3508      	adds	r5, #8
 800394c:	2d0c      	cmp	r5, #12
 800394e:	bf38      	it	cc
 8003950:	250c      	movcc	r5, #12
 8003952:	2d00      	cmp	r5, #0
 8003954:	4607      	mov	r7, r0
 8003956:	db01      	blt.n	800395c <_malloc_r+0x1c>
 8003958:	42a9      	cmp	r1, r5
 800395a:	d905      	bls.n	8003968 <_malloc_r+0x28>
 800395c:	230c      	movs	r3, #12
 800395e:	2600      	movs	r6, #0
 8003960:	603b      	str	r3, [r7, #0]
 8003962:	4630      	mov	r0, r6
 8003964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003968:	4e2e      	ldr	r6, [pc, #184]	; (8003a24 <_malloc_r+0xe4>)
 800396a:	f000 f89d 	bl	8003aa8 <__malloc_lock>
 800396e:	6833      	ldr	r3, [r6, #0]
 8003970:	461c      	mov	r4, r3
 8003972:	bb34      	cbnz	r4, 80039c2 <_malloc_r+0x82>
 8003974:	4629      	mov	r1, r5
 8003976:	4638      	mov	r0, r7
 8003978:	f7ff ffc2 	bl	8003900 <sbrk_aligned>
 800397c:	1c43      	adds	r3, r0, #1
 800397e:	4604      	mov	r4, r0
 8003980:	d14d      	bne.n	8003a1e <_malloc_r+0xde>
 8003982:	6834      	ldr	r4, [r6, #0]
 8003984:	4626      	mov	r6, r4
 8003986:	2e00      	cmp	r6, #0
 8003988:	d140      	bne.n	8003a0c <_malloc_r+0xcc>
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	4631      	mov	r1, r6
 800398e:	4638      	mov	r0, r7
 8003990:	eb04 0803 	add.w	r8, r4, r3
 8003994:	f000 f878 	bl	8003a88 <_sbrk_r>
 8003998:	4580      	cmp	r8, r0
 800399a:	d13a      	bne.n	8003a12 <_malloc_r+0xd2>
 800399c:	6821      	ldr	r1, [r4, #0]
 800399e:	3503      	adds	r5, #3
 80039a0:	1a6d      	subs	r5, r5, r1
 80039a2:	f025 0503 	bic.w	r5, r5, #3
 80039a6:	3508      	adds	r5, #8
 80039a8:	2d0c      	cmp	r5, #12
 80039aa:	bf38      	it	cc
 80039ac:	250c      	movcc	r5, #12
 80039ae:	4638      	mov	r0, r7
 80039b0:	4629      	mov	r1, r5
 80039b2:	f7ff ffa5 	bl	8003900 <sbrk_aligned>
 80039b6:	3001      	adds	r0, #1
 80039b8:	d02b      	beq.n	8003a12 <_malloc_r+0xd2>
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	442b      	add	r3, r5
 80039be:	6023      	str	r3, [r4, #0]
 80039c0:	e00e      	b.n	80039e0 <_malloc_r+0xa0>
 80039c2:	6822      	ldr	r2, [r4, #0]
 80039c4:	1b52      	subs	r2, r2, r5
 80039c6:	d41e      	bmi.n	8003a06 <_malloc_r+0xc6>
 80039c8:	2a0b      	cmp	r2, #11
 80039ca:	d916      	bls.n	80039fa <_malloc_r+0xba>
 80039cc:	1961      	adds	r1, r4, r5
 80039ce:	42a3      	cmp	r3, r4
 80039d0:	6025      	str	r5, [r4, #0]
 80039d2:	bf18      	it	ne
 80039d4:	6059      	strne	r1, [r3, #4]
 80039d6:	6863      	ldr	r3, [r4, #4]
 80039d8:	bf08      	it	eq
 80039da:	6031      	streq	r1, [r6, #0]
 80039dc:	5162      	str	r2, [r4, r5]
 80039de:	604b      	str	r3, [r1, #4]
 80039e0:	4638      	mov	r0, r7
 80039e2:	f104 060b 	add.w	r6, r4, #11
 80039e6:	f000 f865 	bl	8003ab4 <__malloc_unlock>
 80039ea:	f026 0607 	bic.w	r6, r6, #7
 80039ee:	1d23      	adds	r3, r4, #4
 80039f0:	1af2      	subs	r2, r6, r3
 80039f2:	d0b6      	beq.n	8003962 <_malloc_r+0x22>
 80039f4:	1b9b      	subs	r3, r3, r6
 80039f6:	50a3      	str	r3, [r4, r2]
 80039f8:	e7b3      	b.n	8003962 <_malloc_r+0x22>
 80039fa:	6862      	ldr	r2, [r4, #4]
 80039fc:	42a3      	cmp	r3, r4
 80039fe:	bf0c      	ite	eq
 8003a00:	6032      	streq	r2, [r6, #0]
 8003a02:	605a      	strne	r2, [r3, #4]
 8003a04:	e7ec      	b.n	80039e0 <_malloc_r+0xa0>
 8003a06:	4623      	mov	r3, r4
 8003a08:	6864      	ldr	r4, [r4, #4]
 8003a0a:	e7b2      	b.n	8003972 <_malloc_r+0x32>
 8003a0c:	4634      	mov	r4, r6
 8003a0e:	6876      	ldr	r6, [r6, #4]
 8003a10:	e7b9      	b.n	8003986 <_malloc_r+0x46>
 8003a12:	230c      	movs	r3, #12
 8003a14:	4638      	mov	r0, r7
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	f000 f84c 	bl	8003ab4 <__malloc_unlock>
 8003a1c:	e7a1      	b.n	8003962 <_malloc_r+0x22>
 8003a1e:	6025      	str	r5, [r4, #0]
 8003a20:	e7de      	b.n	80039e0 <_malloc_r+0xa0>
 8003a22:	bf00      	nop
 8003a24:	200001e0 	.word	0x200001e0

08003a28 <_realloc_r>:
 8003a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a2c:	4680      	mov	r8, r0
 8003a2e:	4614      	mov	r4, r2
 8003a30:	460e      	mov	r6, r1
 8003a32:	b921      	cbnz	r1, 8003a3e <_realloc_r+0x16>
 8003a34:	4611      	mov	r1, r2
 8003a36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a3a:	f7ff bf81 	b.w	8003940 <_malloc_r>
 8003a3e:	b92a      	cbnz	r2, 8003a4c <_realloc_r+0x24>
 8003a40:	f7ff ff16 	bl	8003870 <_free_r>
 8003a44:	4625      	mov	r5, r4
 8003a46:	4628      	mov	r0, r5
 8003a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a4c:	f000 f838 	bl	8003ac0 <_malloc_usable_size_r>
 8003a50:	4284      	cmp	r4, r0
 8003a52:	4607      	mov	r7, r0
 8003a54:	d802      	bhi.n	8003a5c <_realloc_r+0x34>
 8003a56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a5a:	d812      	bhi.n	8003a82 <_realloc_r+0x5a>
 8003a5c:	4621      	mov	r1, r4
 8003a5e:	4640      	mov	r0, r8
 8003a60:	f7ff ff6e 	bl	8003940 <_malloc_r>
 8003a64:	4605      	mov	r5, r0
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d0ed      	beq.n	8003a46 <_realloc_r+0x1e>
 8003a6a:	42bc      	cmp	r4, r7
 8003a6c:	4622      	mov	r2, r4
 8003a6e:	4631      	mov	r1, r6
 8003a70:	bf28      	it	cs
 8003a72:	463a      	movcs	r2, r7
 8003a74:	f7ff fbac 	bl	80031d0 <memcpy>
 8003a78:	4631      	mov	r1, r6
 8003a7a:	4640      	mov	r0, r8
 8003a7c:	f7ff fef8 	bl	8003870 <_free_r>
 8003a80:	e7e1      	b.n	8003a46 <_realloc_r+0x1e>
 8003a82:	4635      	mov	r5, r6
 8003a84:	e7df      	b.n	8003a46 <_realloc_r+0x1e>
	...

08003a88 <_sbrk_r>:
 8003a88:	b538      	push	{r3, r4, r5, lr}
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	4d05      	ldr	r5, [pc, #20]	; (8003aa4 <_sbrk_r+0x1c>)
 8003a8e:	4604      	mov	r4, r0
 8003a90:	4608      	mov	r0, r1
 8003a92:	602b      	str	r3, [r5, #0]
 8003a94:	f7fd fca2 	bl	80013dc <_sbrk>
 8003a98:	1c43      	adds	r3, r0, #1
 8003a9a:	d102      	bne.n	8003aa2 <_sbrk_r+0x1a>
 8003a9c:	682b      	ldr	r3, [r5, #0]
 8003a9e:	b103      	cbz	r3, 8003aa2 <_sbrk_r+0x1a>
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	bd38      	pop	{r3, r4, r5, pc}
 8003aa4:	200001e8 	.word	0x200001e8

08003aa8 <__malloc_lock>:
 8003aa8:	4801      	ldr	r0, [pc, #4]	; (8003ab0 <__malloc_lock+0x8>)
 8003aaa:	f000 b811 	b.w	8003ad0 <__retarget_lock_acquire_recursive>
 8003aae:	bf00      	nop
 8003ab0:	200001ec 	.word	0x200001ec

08003ab4 <__malloc_unlock>:
 8003ab4:	4801      	ldr	r0, [pc, #4]	; (8003abc <__malloc_unlock+0x8>)
 8003ab6:	f000 b80c 	b.w	8003ad2 <__retarget_lock_release_recursive>
 8003aba:	bf00      	nop
 8003abc:	200001ec 	.word	0x200001ec

08003ac0 <_malloc_usable_size_r>:
 8003ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ac4:	1f18      	subs	r0, r3, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	bfbc      	itt	lt
 8003aca:	580b      	ldrlt	r3, [r1, r0]
 8003acc:	18c0      	addlt	r0, r0, r3
 8003ace:	4770      	bx	lr

08003ad0 <__retarget_lock_acquire_recursive>:
 8003ad0:	4770      	bx	lr

08003ad2 <__retarget_lock_release_recursive>:
 8003ad2:	4770      	bx	lr

08003ad4 <_init>:
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad6:	bf00      	nop
 8003ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ada:	bc08      	pop	{r3}
 8003adc:	469e      	mov	lr, r3
 8003ade:	4770      	bx	lr

08003ae0 <_fini>:
 8003ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae2:	bf00      	nop
 8003ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ae6:	bc08      	pop	{r3}
 8003ae8:	469e      	mov	lr, r3
 8003aea:	4770      	bx	lr
